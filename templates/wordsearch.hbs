<style>

  .back-btn {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    color: #333;
    border: none;
    padding: 8px 8px;
    font-size: 16px;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    font-weight: bold;
    margin-bottom: 20px;
  }
  .back-btn:hover {
    background-color: #e0e0e0;
    transform: translateX(-3px);
  }
  .back-btn::before {
    content: "‚Æê";
    margin-right: 8px;
    font-size: 18px;
  }

  .header-container {
    background-color: #FF7878;
    padding: 20px;
    border-radius: 20px;
    width: fit-content;
    text-align: center;
    margin-top: 5px;
    margin-bottom: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
/* Wrap h6 and button together */
.header-text {
    display: flex;
    align-items: center;
    gap: 2px; /* Space between h6 and button */
  }
  
/* Ensure the button is aligned properly */
#info-button {
    background: none;
    border: none;
    width: 20px;  /* Adjust size */
    height: 20px;
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 4px;
    margin-top: 2px;
  }
  
/* Resize the button image */
#info-button img {
    width: 100%;
    height: 100%;
  }
  
/* Modal Styling */
/* Ensure modal is hidden by default */
.modal {
    display: none; /* Hide modal initially */
    position: fixed; /* Stay in place */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #FF7878; /* Set modal background color */
    color: white; /* White text */
    padding: 20px;
    border-radius: 10px;
    width: 350px; /* Set modal width */
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3); /* Optional shadow */
    z-index: 1000; /* Ensure it's above other content */
  }
  
/* Close button styling */
.modal .close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 20px;
    cursor: pointer;
  }
  
.modal-content {
    background-color: #FF7878;
    color: white;
    padding: 20px;
    border-radius: 10px;
    width: 100%; /* Ensure it takes full width inside modal */
    max-width: 400px; /* Limit max width */
    text-align: center;
    position: relative;
    box-sizing: border-box; /* Prevents padding from affecting width */
  }
  
/* Close button */
.modal-content .close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
    color: white;
  }
  
.modal-content .close:hover {
    color: #fff2f2;
  }

h1 {
    color: white;
    margin: 0;
  }
  
h6 {
    color: white;
    font-style: italic;
    opacity: 0.75;
    margin: 5px 0 0;
  }

  /* ---------------------------
     MAIN GAME CONTAINER (same as animalsounds.hbs)
     --------------------------- */
  .game-container {
    max-width: 600px; /* or adjust as you see fit for your puzzle */
    width: 100%;
    padding: 20px;
    margin: 0 auto;
    background: white;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  /* ---------------------------
     WORD SEARCH-SPECIFIC STYLES
     --------------------------- */
  .wordsearch-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 20px;
    margin-top: 20px;
    /* You can remove margin-left/margin-right if you want it fully centered 
       or tweak to your layout needs. */
  }

  .word-list {
    display: flex;
    flex-direction: column;
    gap: 30px;
    /* Make sure it fits within 600px total if you have large word lists. */
  }

  .word-list span {
    color: #002769;
    font-weight: bold;
    font-size: 14px; /* Slightly smaller to fit better if needed */
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(24, 20px);
    gap: 2px;
  }

  .cell {
    width: 20px;
    height: 20px;
    font-size: 12px; 
    line-height: 20px;  
    text-align: center;
    background-color: #f3f3f3;
    border: 1px solid #ccc;
    user-select: none;
  }

  .cell.highlight {
    background-color: #FF7878;
    color: #fff;
  }

  .word-list span.crossed {
    text-decoration: line-through;
    color: #aaa;
  }

  .message {
    margin-top: 20px;
    font-size: 18px;
    font-weight: bold;
    color: #333;
  }

  .hint-button {
    background: url('showHint-button.png') no-repeat center center;
    background-size: contain;
    width: 120px;
    height: 50px;
    border: none;
    cursor: pointer;
    margin-top: 20px;
    position: relative;
}

/* Tooltip */
.hint-button:hover::after {
    content: "Need Help?";
    position: absolute;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px;
    border-radius: 5px;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
}

</style>

<!-- Back Button -->
<button onclick="loadPage('dysarthriagameselection')" class="back-btn">
  Back to Dysarthria Unit
</button>

<div class="header-container">
        <h1>Dysarthria Unit - Word Search</h1>
        <div class="header-text">
          <h6>Find the Words, Find the Voice</h6>
          <button id="info-button">
            <img src="information-button.png" alt="Info">
          </button>
        </div>
      </div>  

<!-- Main game container -->
<div class="game-container">

  <!-- The puzzle + word list can be wrapped in a sub-container -->
  <div class="wordsearch-container">
    <!-- Left Word List -->
    <div class="word-list" id="left-words">
      <span id="Cognitivelinguistic">Cognitivelinguistic</span>
      <span id="Speakingvalves">Speakingvalves</span>
      <span id="Dysphagia">Dysphagia</span>
      <span id="Apraxia">Apraxia</span>
      <span id="Voice">Voice</span>
      <span id="Speechpathologist">Speechpathologist</span>
    </div>

    <!-- Word Search Grid -->
    <div class="grid" id="word-grid"></div>

    <!-- Right Word List -->
    <div class="word-list" id="right-words">
      <span id="Aspiration">Aspiration</span>
      <span id="Language">Language</span>
      <span id="Aphonia">Aphonia</span>
      <span id="Thickenedliquids">Thickenedliquids</span>
      <span id="Dysarthria">Dysarthria</span>
      <span id="Fluency">Fluency</span>
      <span id="Aphasia">Aphasia</span>
    </div>
  </div>

  <!-- Message -->
  <div class="message" id="message">Find all the words!</div>

  <!-- Hint Button -->
    <button class="hint-button" id="hint-button"></button>

    <!-- Info Modal -->
    <div id="info-modal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <p><em>
            Word Search is a helpful tool to engage our cognitive functions. 
            Take your time and use this game as a relaxing opportunity to redirect focus and attention to words,
            which can be beneficial for cognitive functions and destressing -  
            All of which are common factors with a neurological condition such as Dysarthria.
          </em></p>
          <h6>
            Find all the words from the word bank!<br>
            Highlight horizontally, diagonally, or even backwards<br>
            <strong>Need Help?</strong> Click the hint button below to reveal the words
          </h6>
        </div>
      </div>
</div> <!-- end .game-container -->

<script>
  /***** WORD SEARCH GAME CODE *****/
  const words = [
    "Cognitivelinguistic", "Speechpathologist", "Thickenedliquids", "Speakingvalves", "Aspiration", 
    "Dysarthria", "Dysphagia", "Language", "Fluency", "Apraxia", "Aphonia", "Aphasia", "Voice"
  ];
  const gridSize = 24;
  const wordGrid = document.getElementById("word-grid");
  const message = document.getElementById("message");
  const selectedCells = [];
  const foundWords = new Set();
  const cellElements = [];

  const directions = [
    [0, 1], [1, 0], [1, 1], [1, -1],
    [0, -1], [-1, 0], [-1, -1], [-1, 1]
  ];

  const grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(""));

  function placeWord(word) {
    let placed = false;
    while (!placed) {
      const dir = directions[Math.floor(Math.random() * directions.length)];
      const startRow = Math.floor(Math.random() * gridSize);
      const startCol = Math.floor(Math.random() * gridSize);
      let row = startRow, col = startCol;
      let fits = true;

      for (const letter of word) {
        if (
          row < 0 || row >= gridSize || 
          col < 0 || col >= gridSize ||
          (grid[row][col] !== "" && grid[row][col] !== letter)
        ) {
          fits = false;
          break;
        }
        row += dir[0];
        col += dir[1];
      }

      if (fits) {
        row = startRow;
        col = startCol;
        for (const letter of word) {
          grid[row][col] = letter;
          row += dir[0];
          col += dir[1];
        }
        placed = true;
      }
    }
  }

  function fillGrid() {
    for (const word of words) {
      placeWord(word);
    }
    for (let row = 0; row < gridSize; row++) {
      for (let col = 0; col < gridSize; col++) {
        if (grid[row][col] === "") {
          grid[row][col] = String.fromCharCode(65 + Math.floor(Math.random() * 26));
        }
      }
    }
  }

  function renderGrid() {
    wordGrid.innerHTML = "";
    wordGrid.style.display = "grid";
    wordGrid.style.gridTemplateColumns = `repeat(${gridSize}, 28px)`;
    wordGrid.style.gridGap = "4px";
    wordGrid.style.gridRowGap = "4px";
    for (let row = 0; row < gridSize; row++) {
      cellElements[row] = [];
      for (let col = 0; col < gridSize; col++) {
        const cell = document.createElement("div");
        cell.className = "cell";
        cell.textContent = grid[row][col];
        cell.dataset.row = row;
        cell.dataset.col = col;
        cell.style.width = "26px";
        cell.style.height = "26px";
        cell.style.textAlign = "center";
        cell.style.lineHeight = "26px";
        cell.style.letterSpacing = "2px";
        cell.style.fontSize = "16px";
        cell.addEventListener("mousedown", startSelection);
        cell.addEventListener("mouseover", selectCell);
        cell.addEventListener("mouseup", endSelection);
        wordGrid.appendChild(cell);
        cellElements[row][col] = cell;
      }
    }
  }

  let isSelecting = false;
  let selectionDirection = null;

  function startSelection(event) {
    if (wordGrid.classList.contains("locked")) return; // Stop selection if game is over

    resetHighlight();
    isSelecting = true;
    selectedCells.length = 0;
    selectionDirection = null;
    selectCell(event);
  }

  function selectCell(event) {
    if (!isSelecting) return;
    const cell = event.target;
    if (!selectedCells.includes(cell)) {
      if (selectedCells.length === 1) {
        const firstCell = selectedCells[0];
        const rowDiff = cell.dataset.row - firstCell.dataset.row;
        const colDiff = cell.dataset.col - firstCell.dataset.col;
        if (rowDiff === 0) selectionDirection = "horizontal";
        else if (colDiff === 0) selectionDirection = "vertical";
        else selectionDirection = "diagonal";
      }
      if (selectionDirection) {
        const firstCell = selectedCells[0];
        const rowDiff = cell.dataset.row - firstCell.dataset.row;
        const colDiff = cell.dataset.col - firstCell.dataset.col;
        if (
          (selectionDirection === "horizontal" && rowDiff !== 0) ||
          (selectionDirection === "vertical" && colDiff !== 0) ||
          (selectionDirection === "diagonal" && Math.abs(rowDiff) !== Math.abs(colDiff))
        ) {
          return;
        }
      }
      selectedCells.push(cell);
      if (!cell.classList.contains("found")) {
        cell.style.backgroundColor = "#FF7878";
      }
    }
  }

  function endSelection() {
    isSelecting = false;
    checkSelection();
  }

  function checkSelection() {
    if (wordGrid.classList.contains("locked")) return; // Prevent highlighting if locked

    const selectedWord = selectedCells.map(cell => cell.textContent).join("");
    const reversedWord = selectedWord.split("").reverse().join("");
    if (words.includes(selectedWord) || words.includes(reversedWord)) {
      foundWords.add(selectedWord);
      foundWords.add(reversedWord);
      selectedCells.forEach(cell => {
            cell.classList.add("found");
            cell.style.backgroundColor = "#FF7878"; // Correct highlight
        });

      document.querySelectorAll(".word-list span").forEach(wordElement => {
        if (wordElement.textContent === selectedWord || wordElement.textContent === reversedWord) {
          wordElement.style.backgroundColor = "#FF7878";
        }
      });

    // Check if all words are highlighted
        const allWordsHighlighted = [...document.querySelectorAll(".word-list span")]
            .every(wordElement => wordElement.style.backgroundColor === "rgb(255, 120, 120)");

        if (allWordsHighlighted) {
            message.textContent = "Well done! You found them all!";
            message.style.color = "#FF4B4B";
            
            wordGrid.classList.add("locked"); //lock word grid (disble future selections)
            hintButton.disabled = true; // Disable hint button
            hintButton.style.opacity = "0.5"; // visual marker: make it look disabled
            hintButton.style.cursor = "not-allowed";
        }
        else {
            message.textContent = "Correct! Keep going!";
            message.style.color = ""; // Reset to default
        }
    } else {
        resetHighlight();
        message.textContent = "Try again!";
        message.style.color = ""; // Reset to default
    }

    selectedCells.length = 0;
}

  function resetHighlight() {
    cellElements.forEach(row => {
        row.forEach(cell => {
            if (!cell.classList.contains("found")) {
                cell.style.backgroundColor = ""; // Reset only non-found words
            }
        });
    });
}

  fillGrid();
  renderGrid();

  //show hint
const hintButton = document.getElementById("hint-button");
let hintActive = false;

hintButton.addEventListener("click", () => {
    if (wordGrid.classList.contains("locked")) return; // locks hint when game is over

    hintActive = !hintActive; // Toggle hint mode

    if (hintActive) {
        words.forEach(word => {
            if (!foundWords.has(word)) {
                highlightWord(word, "yellow"); // Highlight remaining words
            }
        });
        message.textContent = "We‚Äôre here to help.";
        message.style.color = "#FF7878"; 
    } else {
        resetHighlight();
        message.textContent = "Find all the words!";
        message.style.color = ""; // Reset color to default
    }
});

function highlightWord(word, color) {
    for (let row = 0; row < gridSize; row++) {
        for (let col = 0; col < gridSize; col++) {
            let selectedWord = "";
            let cells = [];

            for (const [dx, dy] of directions) {
                let r = row, c = col;
                selectedWord = "";
                cells = [];

                for (let i = 0; i < word.length; i++) {
                    if (r < 0 || r >= gridSize || c < 0 || c >= gridSize) break;
                    selectedWord += grid[r][c];
                    cells.push(cellElements[r][c]);
                    r += dx;
                    c += dy;
                }

                if (selectedWord === word) {
                    cells.forEach(cell => {
                        // Only highlight in yellow if it is NOT already a found word
                        if (!cell.classList.contains("found")) {
                            cell.style.backgroundColor = color;
                        }
                    });
                }
            }
        }
    }

    const modal = document.getElementById("info-modal");
    const btn = document.getElementById("info-button");
    const close = document.querySelector(".modal .close");
  
    // Make sure modal is hidden initially
    modal.style.display = "none";
  
    btn.addEventListener("click", () => {
      modal.style.display = "block"; // Show modal when button is clicked
    });
  
    close.addEventListener("click", () => {
      modal.style.display = "none"; // Close modal when X is clicked
    });
  
    window.addEventListener("click", (event) => {
      if (event.target === modal) {
        modal.style.display = "none"; // Close modal if user clicks outside of it
      }
    });

}
    
</script>
