 <style>
    /* Reset basic body styling */
    body {
      margin: 0;
      padding: 0;
      background-color: #f8f8f8;
      font-family: Arial, sans-serif;
    }

    /* Back Button styling */
    .back-btn {
      display: flex;
      align-items: center;
      background-color: #f8f9fa;
      color: #333;
      border: none;
      padding: 8px 8px;
      font-size: 16px;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
      font-weight: bold;
      margin-bottom: 20px;
    }

    .back-btn:hover {
      background-color: #e0e0e0;
      transform: translateX(-3px);
    }

    .back-btn::before {
      content: "‚Æê";
      margin-right: 8px;
      font-size: 18px;
    }

    /* Adjust header container to align items */
.header-container {
    background-color: #FF7878;
    text-align: center;
    padding: 20px;
    border-radius: 20px;
    width: 80%;
    max-width: 600px;
    margin: 25px auto 50px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  
  /* Wrap h6 and button together */
  .header-text {
    display: flex;
    align-items: center;
    gap: 2px; /* Space between h6 and button */
  }
  
  /* Ensure the button is aligned properly */
  #info-button {
    background: none;
    border: none;
    width: 20px;  /* Adjust size */
    height: 20px;
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 3px;
    margin-top: 2.5px;
  }
  
  /* Resize the button image */
  #info-button img {
    width: 100%;
    height: 100%;
  }
  
  /* Modal Styling */
  /* Ensure modal is hidden by default */
  .modal {
    display: none; /* Hide modal initially */
    position: fixed; /* Stay in place */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #FF7878; /* Set modal background color */
    color: white; /* White text */
    padding: 20px;
    border-radius: 10px;
    width: 370px; /* Set modal width */
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3); /* Optional shadow */
    z-index: 1000; /* Ensure it's above other content */
  }
  
  /* Close button styling */
  .modal .close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 20px;
    cursor: pointer;
  }
  
  .modal-content {
    background-color: #FF7878;
    color: white;
    padding: 20px;
    border-radius: 10px;
    width: 100%; /* Ensure it takes full width inside modal */
    max-width: 400px; /* Limit max width */
    text-align: center;
    position: relative;
    box-sizing: border-box; /* Prevents padding from affecting width */
  }
  
  /* Close button */
  .modal-content .close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
    color: white;
  }
  
  .modal-content .close:hover {
    color: #fff2f2;
  }
  
  
  h1 {
    color: white;
    margin: 0;
  }
  
  h6 {
    color: white;
    font-style: italic;
    opacity: 0.75;
    margin: 5px 0 0;
  }

    /* Main content container */
    .content {
      margin: 20px auto;
      text-align: center;
      max-width: 600px; /* Adjust as needed */
      width: 90%;
    }

    /* Book Selector */
    .custom-select {
      margin-bottom: 20px;
    }

    #bookSelector {
      width: 100%;
      max-width: 310px;
      border-radius: 10px;
      padding: 10px;
      font-size: 16px;
      text-align: center;
    }

    /* Book image and text */
    .book-image {
      width: 310px;
      height: auto;
      border-radius: 10px;
      margin-bottom: 10px;
    }

    .book-text {
      font-style: italic;
      font-size: 20px;
      line-height: 1.5;
      color: #002769;
      text-align: center;
      margin-top: 15px;
      margin-bottom: 20px;
    }

    /* Audio Buttons */
    .audio-buttons {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 15px;
      margin-bottom: 20px;
    }

    .audio-button {
      width: 50px;
      height: auto;
      cursor: pointer;
      border-radius: 5px;
      margin: 5px;
      padding: 8px;
      background-color: #ffffff;
    }

    .audio-button:hover {
    background-color: #e0e0e0;
  }

  .custom-modal-overlay {
      display: none; /* hidden by default */
      position: fixed;
      z-index: 999; /* on top of everything */
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6); /* semi-transparent dark overlay */
  }
  .custom-modal {
      background-color: #fff;
      width: 300px; /* adjust as needed */
      margin: 15% auto; /* center vertically */
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
  }
  .custom-modal h2 {
      margin-top: 0;
      color: #2c3e50;
  }
  .custom-modal p {
      color: #333;
      margin-bottom: 20px;
  }
  .close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
  }
  .modal-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
  }
  .modal-ok-button:hover {
      background-color: #ff003c;
  }

  </style>

  <!-- Back Button -->
  <button onclick="loadPage('apraxiagameselection')" class="back-btn">Back to Apraxia Unit</button>

 <div class="header-container">
        <h1>Apraxia Unit - Book Reading</h1>
        <div class="header-text">
          <h6>Stories for your Speech Journey</h6>
          <button id="info-button">
            <img src="information-button.png" alt="Info">
          </button>
        </div>
      </div> 

  <!-- Main Content -->
  <div class="content">
    <h2 id="readingTitle">Reading Time!</h2>
    <br>

    <div class="custom-select">
      <select id="bookSelector" aria-label="Select a Story">
        <option value="" disabled selected hidden>Select a Story</option>
        <option value="loveyouforever">Love You Forever</option>
        <option value="threeblindmice">Three Blind Mice</option>
      </select>
    </div>

    <img id="bookImage" src="placeholder-bookreading.png" class="book-image" alt="Book Cover">
    <p id="bookText" class="book-text"></p>

    <div class="audio-buttons" id="audioButtons" style="display: none;">
      <img src="recordsound-button.png" class="audio-button" alt="Record Sound">
      <img src="playrecording-button.png" class="audio-button" alt="Play Recording">
    </div>
  </div>

      <!-- Custom Modal (for styled alerts) -->
<div id="customModalOverlay" class="custom-modal-overlay">
  <div class="custom-modal">
    <button class="close-button" onclick="closeModal()">&times;</button>
    <h2 id="modalTitle">Modal Title</h2>
    <br>
    <p id="modalMessage">Modal message goes here.</p>
    <button class="modal-ok-button" onclick="closeModal()">OK</button>
  </div>
</div>

<!-- Info Modal -->
    <div id="info-modal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <p><em>
            Book Reading by itself is one of the most valuable tools for engaging learning and development. 
            As Apraxia is not a muscle problem but a motor coordination problem, Book Reading is great practice for Motor Planning. <br>
            These books are especially curated for their predictable patterns to help it's readers develop Phonemic Awareness with Repetitive Practice. 
            With all these benefits, one must also take into account that Book Reading is just plain ol' fun!            
          </em></p>
          <h6>
            Select a Story using the dropdown menu <br>
            Click the microphone to record your Book Reading <br>
            Click the playback to play back <strong>your</strong> Book Reading recording            
          </h6>
        </div>
      </div>

<script>
   // ====== Show & Hide Custom Modal ======
  function showModal(title, message) {
    document.getElementById("modalTitle").innerText = title;
    document.getElementById("modalMessage").innerText = message;
    document.getElementById("customModalOverlay").style.display = "block";
  }
  function closeModal() {
    document.getElementById("customModalOverlay").style.display = "none";
  }
  
let bookSelector = document.getElementById("bookSelector");
let bookImage = document.getElementById("bookImage");
let bookText = document.getElementById("bookText");
let audioButtons = document.getElementById("audioButtons");
let recordButton = document.querySelector(".audio-buttons img[alt='Record Sound']");
let playButton = document.querySelector(".audio-buttons img[alt='Play Recording']");

let mediaRecorder;
let audioChunks = [];
let recordings = {}; // Store recordings per book
let isRecording = false;
let transcript = "";

// Ignore stop words
const stopWords = new Set(["the", "and", "is", "as", "a", "an", "for", "of", "to", "in", "on", "at", "with"]);

// Speech Recognition
let recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
recognition.continuous = false;
recognition.lang = "en-US";
recognition.interimResults = false;
recognition.maxAlternatives = 1;

// Request microphone access on page load
navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
    mediaRecorder = new MediaRecorder(stream);
    console.log("Microphone access granted.");
}).catch((error) => {
    console.error("Microphone access denied: ", error);
});

bookSelector.addEventListener("change", function() {
    if (bookSelector.value === "loveyouforever") {
        bookImage.src = "book-loveyouforever.png";
        bookText.innerText = `I'll love you forever, 
                              I'll like you for always, 
                              As long as I'm living 
                              my baby you'll be.`;
        audioButtons.style.display = "flex";
    } else if (bookSelector.value === "threeblindmice") {
        bookImage.src = "book-threeblindmice.png";
        bookText.innerText = `‚Äú Three Blind Mice
                                Three Blind Mice
                                See how they run
                                See how they run
                                They all ran after the farmer‚Äôs wife
                                She cut off their tails with a carving knife
                                Did you ever see such a sight in your life
                                as THREE BLIND MICE. ‚Äù`;
        audioButtons.style.display = "flex";
    } else {
        audioButtons.style.display = "none";
    }
});

// Recording Audio & Speech Recognition Together
recordButton.addEventListener("click", () => {
    if (!mediaRecorder) {
        console.error("Microphone access not available.");
        return;
    }
    let bookName = bookSelector.options[bookSelector.selectedIndex].text;
    
    if (isRecording) {
        mediaRecorder.stop();
        recognition.stop();
        return;
    }
    
    console.log(`Recording started for: ${bookName}`);
    audioChunks = [];
    isRecording = true;
    transcript = "";

    // Create a promise that resolves when recording stops
    let recordingPromise = new Promise(resolve => {
        mediaRecorder.ondataavailable = (event) => {
            audioChunks.push(event.data);
        };
        mediaRecorder.onstop = () => {
            let audioBlob = new Blob(audioChunks, { type: "audio/webm" });
            let audioUrl = URL.createObjectURL(audioBlob);
            recordings[bookName] = audioUrl; // Store recording by book name
            isRecording = false;
            console.log(`Finished recording for: ${bookName}`);
            resolve();
        };
    });
    
    // Create a promise that resolves when recognition ends
    let recognitionPromise = new Promise(resolve => {
        recognition.onresult = (event) => {
            transcript = event.results[0][0].transcript.trim().toLowerCase();
        };
        recognition.onend = () => {
            resolve();
        };
    });

    mediaRecorder.start();
    recognition.start();

    // Stop both after 25 seconds if not already stopped
    setTimeout(() => {
        if (isRecording) {
            mediaRecorder.stop();
            recognition.stop();
        }
    }, 25000);

    // When both promises resolve, run the analysis
    Promise.all([recordingPromise, recognitionPromise]).then(() => {
        console.log(`User said: ${transcript}`);
        analyzeAccuracy(transcript, bookText.innerText, bookName);
    });
});

// Playing back the recorded audio
playButton.addEventListener("click", () => {
    let bookName = bookSelector.options[bookSelector.selectedIndex].text;
    if (isRecording) {
        mediaRecorder.stop();
        recognition.stop();
    }
    if (recordings[bookName]) {
        let recordedAudio = new Audio(recordings[bookName]);
        recordedAudio.play();
    } else {
        showModal("No recording available for this book. Please record first.");
    }
});

function levenshteinDistance(a, b) {
    let matrix = [];
    for (let i = 0; i <= b.length; i++) {
        matrix[i] = [i];
    }
    for (let j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
    }
    for (let i = 1; i <= b.length; i++) {
        for (let j = 1; j <= a.length; j++) {
            if (b.charAt(i - 1) === a.charAt(j - 1)) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1, // Substitution
                    matrix[i][j - 1] + 1,     // Insertion
                    matrix[i - 1][j] + 1      // Deletion
                );
            }
        }
    }
    return matrix[b.length][a.length];
}

// Analyzing speech accuracy
function analyzeAccuracy(userSpeech, referenceText, bookName) {
    if (!userSpeech) {
        console.log(`Analysis skipped: No speech detected for ${bookName}`);
        return;
    }

    // Normalize text (convert to lowercase, remove punctuation)
    let cleanText = (text) => text.toLowerCase().replace(/[^\w\s]/g, '');
    
    // Use regex to split on one or more whitespace characters and filter out empties
    let userWords = cleanText(userSpeech).split(/\s+/).filter(word => word.length > 0 && !stopWords.has(word));
    let referenceWords = cleanText(referenceText.replace(/<br>/g, " ")).split(/\s+/).filter(word => word.length > 0 && !stopWords.has(word));

    let correctCount = 0;
    let totalWords = referenceWords.length;

    for (let i = 0; i < totalWords; i++) {
        if (i < userWords.length) {
            let distance = levenshteinDistance(userWords[i], referenceWords[i]);
            let maxLen = Math.max(userWords[i].length, referenceWords[i].length);
            let similarity = (maxLen - distance) / maxLen; // Similarity percentage

            if (similarity > 0.8) {
                correctCount++; // High similarity counts as correct
            } else if (similarity > 0.5) {
                correctCount += 0.5; // Partial credit for close words
            }
        }
    }

    let accuracy = (correctCount / totalWords) * 100;
    console.log(`Analysis complete: Accuracy score for ${bookName} is ${accuracy.toFixed(2)}%`);
    showModal(`Your accuracy: ${accuracy.toFixed(2)}%`);
}

    const modal = document.getElementById("info-modal");
    const btn = document.getElementById("info-button");
    const close = document.querySelector(".modal .close");
  
    // Make sure modal is hidden initially
    modal.style.display = "none";
  
    btn.addEventListener("click", () => {
      modal.style.display = "block"; // Show modal when button is clicked
    });
  
    close.addEventListener("click", () => {
      modal.style.display = "none"; // Close modal when X is clicked
    });
  
    window.addEventListener("click", (event) => {
      if (event.target === modal) {
        modal.style.display = "none"; // Close modal if user clicks outside of it
      }
    });

</script>
    