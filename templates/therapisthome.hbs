<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>SPEECH UP</title>
  <link rel="icon" href="tabpic.png" type="image/png">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <style>
    /* Global Reset & Fonts */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }
    /* Loading Overlay */
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999; /* Ensure it's on top */
    }
    .loader {
      border: 16px solid #f3f3f3;
      border-top: 16px solid #db3f34; 
      border-radius: 50%;
      width: 120px;
      height: 120px;
      animation: spin 2s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    body {
      display: flex;
      height: 100vh;
      background-color: #eef3fa;
    }
    /* Sidebar */
    .sidebar {
      width: 250px;
      background-color: #2c3e50;
      color: white;
      padding: 20px;
      display: flex;
      flex-direction: column;
      position: fixed;
      height: 100vh;
      left: 0;
      top: 0;
      transition: transform 0.3s ease-in-out;
    }
    .sidebar h3 {
      margin-bottom: 20px;
      text-align: center;
    }
    .sidebar a {
      text-decoration: none;
      color: white;
      padding: 10px;
      margin: 5px 0;
      display: block;
      border-radius: 5px;
      cursor: pointer;
    }
    .sidebar a:hover {
      background-color: #df1645;
    }
    .sidebar.hidden {
      transform: translateX(-100%);
    }
    /* Sidebar Toggle Button */
    .sidebar-toggle {
      position: fixed;
      top: 300px;
      left: 255px;
      background-color: #2c3e50;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 10px;
      padding: 5px;
      border-radius: 50%;
      transition: left 0.3s ease-in-out;
    }
    .sidebar.hidden + .sidebar-toggle {
      left: 10px;
    }
    .speechup-logo {
      border-radius: 5px;
    }
    /* Main Content */
    .main-content {
      flex: 1;
      padding: 20px;
      margin-left: 260px;
      transition: margin-left 0.3s ease-in-out;
      width: 100%;
    }
    .sidebar.hidden ~ .main-content {
      margin-left: 20px;
    }
    /* Top Bar */
    .top-bar {
      background-color: #fff;
      padding: 10px 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    .welcome-section {
      margin-top: 20px;
    }
    h2 {
      color: #333;
    }
    /* Profile Section */
    .profile-container {
      display: flex;
      align-items: center;
      cursor: pointer;
      margin-left: auto; 
    }
    .profile-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #dcd7d9;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: bold;
      font-size: 18px;
      cursor: pointer;
    }
    .dropdown-menu {
      position: absolute;
      top: 70px;
      right: 0;
      background-color: #2c3e50;
      border: 1px solid #2c3e50;
      border-radius: 5px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      display: none;
      width: 150px;
    }
    .dropdown-menu a {
      display: block;
      padding: 10px;
      text-decoration: none;
      color: #ffffff;
      text-align: left;
    }
    .dropdown-menu a:hover {
      background-color: #df1645;
    }
    .dropdown-menu.active {
      display: block;
    }
    .logout-btn {
      display: block;
      padding: 10px;
      color: white;
      background-color: red;
      text-align: center;
      text-decoration: none;
      border-radius: 5px;
    }
    .logout-btn:hover {
      background-color: darkred;
    }
    /* Dynamic Content */
    .content-area {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-top: 20px;
    }
    /* Therapist Home - Pending Appointments */
    table {
      width: 100%;
      margin-top: 20px;
      border-radius: 5px;
      border: 4px solid #2c3e50;
    }
    th, td {
      padding: 10px;
      border: 1px solid #ddd;
      text-align: center;
      border-radius: 5px;
    }
    th {
      background-color: #df1645;
      color: white;
      border-radius: 5px;
    }
    /* Action Buttons */
    td button {
      padding: 5px 10px;
      border: none;
      cursor: pointer;
      font-size: 14px;
    }
    td button:first-child {
      background-color: #28a745;
      color: white;
      border-radius: 5px;
    }
    td button:first-child:hover {
      background-color: #00ff62;
      color: white;
    }
    td button:last-child {
      background-color: #dc3545;
      color: white;
      border-radius: 5px;
    }
    td button:last-child:hover {
      background-color: #ff0000;
      color: white;
    }
    .btn {
      display: inline-block;
      padding: 10px 10px;
      background-color: #df1645; 
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 15px;
      transition: background-color 0.3s ease;
    }
    .btn:hover {
      background-color: #ff003c;
    }

    /* ------------------ Custom Modal for Alerts ------------------ */
    .custom-modal-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6);
    }
    .custom-modal {
      background-color: #fff;
      width: 300px;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    .custom-modal h2 {
      margin-top: 0;
      color: #2c3e50;
    }
    .custom-modal p {
      color: #333;
      margin-bottom: 20px;
    }
    .close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
    }
    .modal-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .modal-ok-button:hover {
      background-color: #ff003c;
    }

    /* ------------------ Custom Confirm Modal ------------------ */
    .custom-confirm-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6);
    }
    .custom-confirm {
      background-color: #fff;
      width: 300px;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    .custom-confirm h2 {
      margin-top: 0;
      color: #2c3e50;
    }
    .custom-confirm p {
      color: #333;
      margin-bottom: 20px;
    }
    .confirm-close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
    }
    .confirm-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .confirm-ok-button:hover {
      background-color: #ff003c;
    }
    .confirm-cancel-button {
      background-color: #888;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 10px;
      transition: background-color 0.3s ease;
    }
    .confirm-cancel-button:hover {
      background-color: #666;
    }

   @media (max-width: 768px) {
  /* Sidebar: Hidden by default via .hidden class */
  .sidebar {
    width: 200px;
    position: fixed;
    left: 0;
    top: 0;
    height: 100vh;
    transition: transform 0.3s ease-in-out;
    z-index: 1000;
  }
  /* When sidebar has .hidden, slide it off-canvas */
  .sidebar.hidden {
    transform: translateX(-100%);
  }
  /* When sidebar is visible (i.e. not .hidden) */
  .sidebar:not(.hidden) {
    transform: translateX(0);
  }

  /* Sidebar Toggle Button */
  .sidebar-toggle {
    position: fixed;
    top: 10px;
    left: 10px;
    background-color: #2c3e50;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
    padding: 8px;
    border-radius: 50%;
    z-index: 1100;
  }

  /* Main Content: Occupies full width when sidebar is hidden */
  .main-content {
    margin-left: 0;
    padding: 10px;
    transition: margin-left 0.3s ease-in-out;
  }
  /* When sidebar is visible, push main content over */
  .sidebar:not(.hidden) ~ .main-content {
    margin-left: 200px;
  }

  /* Top Bar adjustments for mobile */
  .top-bar {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px;
  }

  /* Responsive table adjustments */
  table {
    display: block;
    width: 100%;
    overflow-x: auto;
  }

  /* Content area adjustments for spacing */
  .content-area,
  .appointment-form {
    padding: 15px;
    margin-top: 15px;
  }

   /* Optionally, adjust buttons and fonts */
  .btn {
    padding: 8px 12px;
    font-size: 14px;
  }

  /* Adjust header container to align items */
.header-container {
  background-color: #FF7878;
  padding: 20px;
  border-radius: 20px;
  width: fit-content;
  text-align: center;
  margin-top: 10px;
  margin-bottom: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Wrap h6 and button together */
.header-text {
  display: flex;
  align-items: center;
  gap: 2px; /* Space between h6 and button */
}

/* Ensure the button is aligned properly */
#info-button {
  background: none;
  border: none;
  width: 20px;  /* Adjust size */
  height: 20px;
  padding: 0;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Resize the button image */
#info-button img {
  width: 100%;
  height: 100%;
}

/* Modal Styling */
/* Ensure modal is hidden by default */
.modal {
  display: none; /* Hide modal initially */
  position: fixed; /* Stay in place */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: #FF7878; /* Set modal background color */
  color: white; /* White text */
  padding: 20px;
  border-radius: 10px;
  width: 350px; /* Set modal width */
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3); /* Optional shadow */
  z-index: 1000; /* Ensure it's above other content */
}

/* Close button styling */
.modal .close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 20px;
  cursor: pointer;
}

.modal-content {
  background-color: #FF7878;
  color: white;
  padding: 20px;
  border-radius: 10px;
  width: 100%; /* Ensure it takes full width inside modal */
  max-width: 400px; /* Limit max width */
  text-align: center;
  position: relative;
  box-sizing: border-box; /* Prevents padding from affecting width */
}

/* Close button */
.modal-content .close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 24px;
  cursor: pointer;
  color: white;
}

.modal-content .close:hover {
  color: #fff2f2;
}

h1 {
  color: white;
  margin: 0;
}

h6 {
  color: white;
  font-style: italic;
  opacity: 0.75;
  margin: 5px 0 0;
}
}

  </style>

</head>
<body>

  <div id="loading-overlay"> 
    <div class="loader"></div>
  </div>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <img src="speechuplogo.png" alt="SpeechUp Logo" class="speechup-logo">
    <br>
    <a href="/therapisthome" onclick="loadPage('home')">
      <i class="fas fa-home"></i> Home
    </a>
    <a href="#" onclick="loadPage('therapists')">
      <i class="fas fa-user"></i> Therapists
    </a>
    <a href="#" onclick="loadPage('patients')">
      <i class="fas fa-heart"></i> Patients
    </a>
    <a href="#" onclick="loadPage('courses')">
      <i class="fas fa-book"></i> Courses
    </a>
    <a href="#" onclick="loadPage('communityforum')">
      <i class="fas fa-comments"></i> Community Forum
    </a>
  </div>

  <!-- Sidebar Toggle Button -->
  <button class="sidebar-toggle" id="sidebarToggle" onclick="toggleSidebar()">&#9664;</button>

  <!-- Main Content -->
  <div class="main-content" id="mainContent">
    <!-- Top Bar with Search and Profile -->
    <div class="top-bar">
      <div class="profile-container" onclick="toggleDropdown()">
        <img class="profile-icon" src="{{profileImage}}" alt="Profile">
        <div class="dropdown-menu" id="dropdownMenu">
          <a href="#" onclick="loadPage('therapistprofile'); return false;">View Profile</a>
          <a href="/logout" class="logout-btn">Log Out</a>
        </div>
      </div>
    </div>

    <!-- Dynamic Content Area -->
    <div class="content-area" id="contentArea">
      <h2>Welcome back {{firstName}}!</h2>
      <br><br>
      <h3>Here are your Appointment Requests</h3>
      <table border="1">
        <thead>
          <tr>
            <th>Patient Email</th>
            <th>Date</th>
            <th>Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="appointmentsTable">
          <tr><td colspan="4">Loading appointments...</td></tr>
        </tbody>
      </table>
      <br><br>

      <!-- New "View Approved Appointments" section -->
      <button class="btn" onclick="loadTherapistApprovedAppointments()">View Approved Appointments</button>
      <table border="1" id="therapistApprovedAppointmentsTable">
        <thead>
          <tr>
            <th>Patient Email</th>
            <th>Date</th>
            <th>Time</th>
          </tr>
        </thead>
        <tbody>
          <tr><td colspan="3">Approved Appointments</td></tr>
        </tbody>
      </table>

    </div>
  </div>

  <!-- Custom Alert Modal -->
  <div id="customModalOverlay" class="custom-modal-overlay">
    <div class="custom-modal">
      <button class="close-button" onclick="closeModal()">&times;</button>
      <h2 id="modalTitle">Alert</h2>
      <br>
      <p id="modalMessage">Modal message goes here.</p>
      <button class="modal-ok-button" onclick="closeModal()">OK</button>
    </div>
  </div>

  <!-- Custom Confirm Modal -->
  <div id="customConfirmOverlay" class="custom-confirm-overlay">
    <div class="custom-confirm">
      <button class="confirm-close-button" onclick="closeConfirmModal()">&times;</button>
      <h2 id="confirmModalTitle">Confirm</h2>
      <p id="confirmModalMessage">Are you sure?</p>
      <div style="margin-top:20px;">
        <button id="modalOkButton" class="confirm-ok-button">OK</button>
        <button id="modalCancelButton" class="confirm-cancel-button">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    /******** Custom Modal Functions with Callback ********/
    function showModal(title, message, callback) {
      document.getElementById("modalTitle").innerText = title;
      document.getElementById("modalMessage").innerText = message;
      const overlay = document.getElementById("customModalOverlay");
      overlay.style.display = "block";
      const okButton = overlay.querySelector(".modal-ok-button");
      okButton.onclick = function() {
        closeModal();
        if (callback) callback();
      };
    }
    function closeModal() {
      document.getElementById("customModalOverlay").style.display = "none";
    }

    /******** Custom Confirm Modal Functions ********/
    function confirmModal(title, message) {
      return new Promise((resolve) => {
        document.getElementById("confirmModalTitle").innerText = title;
        document.getElementById("confirmModalMessage").innerText = message;
        const overlay = document.getElementById("customConfirmOverlay");
        overlay.style.display = "block";
        const okButton = document.getElementById("modalOkButton");
        const cancelButton = document.getElementById("modalCancelButton");
        okButton.onclick = function() {
          closeConfirmModal();
          resolve(true);
        };
        cancelButton.onclick = function() {
          closeConfirmModal();
          resolve(false);
        };
      });
    }
    function closeConfirmModal() {
      document.getElementById("customConfirmOverlay").style.display = "none";
    }

    /******** Sidebar Toggle ********/
    function toggleSidebar() {
      document.getElementById("sidebar").classList.toggle("hidden");
      document.getElementById("sidebarToggle").innerHTML = 
        document.getElementById("sidebar").classList.contains("hidden") ? "&#9654;" : "&#9664;";
    }

    function loadPage(page) {

       document.getElementById("loading-overlay").style.display = "flex";

      if (page === 'communityforum') {
        fetch('/communityforum')
          .then(response => response.text())
          .then(html => {
            document.getElementById("contentArea").innerHTML = html;
            addForumEventListeners();
            document.getElementById("loading-overlay").style.display = "none";
          })
          .catch(error => {
            console.error("Error loading page:", error);
            document.getElementById("contentArea").innerHTML = "<h2>Error loading content</h2>";
            document.getElementById("loading-overlay").style.display = "none";
          });
      } else {
        fetch(`/content/${page}`)
          .then(response => {
            if (!response.ok) {
              throw new Error("Page not found");
            }
            return response.text();
          })
          .then(html => {
            document.getElementById("contentArea").innerHTML = html;

            // Add event listeners AFTER the content is loaded
            if (page === 'courses') {
              addCoursesEventListeners();
            }
            if (page === 'apraxiagameselection') {
              addApraxiaEventListeners();
            }
            if (page === 'dysarthriagameselection') {
              addDysarthriaEventListeners();
            }
            if (page === 'aphasiagameselection') {
              addAphasiaEventListeners();
            }
            if (page === 'animalsounds') {
              startGameAnimalSounds();
            }
                 // Execute inline scripts manually
          const scripts = contentArea.querySelectorAll("script");
          scripts.forEach(script => {
            try {
              eval(script.innerText);
            } catch (e) {
              console.error("Error executing script:", e);
            }
          });
          
            document.getElementById("loading-overlay").style.display = "none";
          })
          .catch(error => {
            console.error("Error loading page:", error);
            document.getElementById("contentArea").innerHTML = "<h2>Error loading content</h2>";
            document.getElementById("loading-overlay").style.display = "none";
          });
      }
    }


    function addForumEventListeners() {
      const postForm = document.querySelector('.forum-container form[action="/communityforum/post"]');
      if (postForm) {
        postForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(postForm);
          const data = Object.fromEntries(formData.entries());
          try {
            const response = await fetch('/communityforum/post', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data),
            });
            if (response.ok) {
              showModal("Success", "Post submitted successfully!", () => {
                loadPage('communityforum');
              });
            } else {
              console.error("Failed to submit post:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting post:", error);
          }
        });
      }

    const replyForms = document.querySelectorAll('.forum-container form[action^="/communityforum/reply/"]');
      replyForms.forEach(form => {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());
          try {
            const response = await fetch(form.action, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data),
            });
            if (response.ok) {
              showModal("Success", "Reply submitted successfully!", () => {
                loadPage('communityforum');
              });
            } else {
              console.error("Failed to submit reply:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting reply:", error);
          }
        });
      });
    }

    function toggleDropdown() {
      document.getElementById("dropdownMenu").classList.toggle("active");
    }

    function searchFunction() {
      showModal("Search", "Searching: " + document.getElementById("searchInput").value);
    }

    function addCoursesEventListeners() {
        const apraxiaButton = document.querySelector('.button-group button:nth-child(1)'); // Select Apraxia button
    if (apraxiaButton) {
        apraxiaButton.addEventListener('click', () => {
            loadPage('apraxiagameselection');
        });
    }

        const dysarthriaButton = document.querySelector('.button-group button:nth-child(2)'); // Select Dysarthria button
    if (dysarthriaButton) {
        dysarthriaButton.addEventListener('click', () => {
            loadPage('dysarthriagameselection');
        });
    }

        const aphasiaButton = document.querySelector('.button-group button:nth-child(3)'); // Select Aphasia button
    if (aphasiaButton) {
        aphasiaButton.addEventListener('click', () => {
            loadPage('aphasiagameselection');
        });
    }

}

        function addApraxiaEventListeners(){
        const animalSoundsButton = document.querySelector('.button-group button:nth-child(1)');
    if(animalSoundsButton){
        animalSoundsButton.addEventListener('click', () => {
            loadPage('animalsounds'); // Load the animal sounds page
        });
    }

        const bookReadingButton = document.querySelector('.button-group button:nth-child(2)');
    if(bookReadingButton){
        bookReadingButton.addEventListener('click', () => {
            loadPage('bookreading'); // Load the book reading page
        });
    }
}

        function addDysarthriaEventListeners(){
        const wordSearchButton = document.querySelector('.button-group button:nth-child(1)');
    if(wordSearchButton){
        wordSearchButton.addEventListener('click', () => {
            loadPage('wordsearch'); 
        });
    }

        const wordFlipbookButton = document.querySelector('.button-group button:nth-child(2)');
    if(wordFlipbookButton){
        wordFlipbookButton.addEventListener('click', () => {
            loadPage('wordflipbook');
        });
    }
}

        function addAphasiaEventListeners(){
        const matchingGamesButton = document.querySelector('.button-group button:nth-child(1)');
    if(matchingGamesButton){
        matchingGamesButton.addEventListener('click', () => {
            loadPage('matchinggames');
        });
    }

        const tongueTwistersButton = document.querySelector('.button-group button:nth-child(2)');
    if(tongueTwistersButton){
        tongueTwistersButton.addEventListener('click', () => {
            loadPage('tonguetwisters');
        });
    }
}


    function enableEditing() {
      document.getElementById("firstName").disabled = false;
      document.getElementById("lastName").disabled = false;
      document.getElementById("password").disabled = false;
      document.getElementById("bio").disabled = false;
      document.getElementById("workingHours").disabled = false;
      document.getElementById("updateProfile").style.display = "inline-block";
      document.getElementById("editProfile").style.display = "none";
    }

    async function updateProfile() {
      const firstName = document.getElementById("firstName").value;
      const lastName = document.getElementById("lastName").value;
      const password = document.getElementById("password").value;
      const bio = document.getElementById("bio").value;
      const workingHours= document.getElementById("workingHours").value;
      const response = await fetch("/update-profile-therapist", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ firstName, lastName, password, bio, workingHours })
      });
      const result = await response.json();
      if (result.success) {
        showModal("Success", "Profile updated successfully!", () => {
                loadPage('therapistprofile');
              });
      } else {
        showModal("Error", "Error updating profile.");
      }
    }

    async function deleteAccount() {
      const confirmed = await confirmModal(
        "Delete Account",
        "Are you sure you want to delete your account? This action cannot be undone."
      );
      if (confirmed) {
        const response = await fetch("/delete-account-therapist", { method: "POST" });
        const result = await response.json();
        if (result.success) {
          showModal("Success", "Account deleted successfully!", () => {
            window.location.href = "/";
          });
        } else {
          showModal("Error", "Error deleting account.");
        }
      }
    }

    async function verifyTherapistPassword() {
      const enteredPassword = document.getElementById("verifyPassword").value;

      const response = await fetch("/verify-password-therapist", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ password: enteredPassword })
      });
      const result = await response.json();
      if (result.success) {
        document.getElementById("passwordField").value = enteredPassword;
        document.getElementById("togglePassword").disabled = false;
        
        showModal("Success", "Password verified successfully!");
      } else {
        showModal("Error", "Incorrect password!");
      }
    }

    function uploadTherapistProfileImage(event) {
      event.preventDefault();
      let formData = new FormData();
      let fileInput = document.getElementById("profileImageInput").files[0];
      if (!fileInput) {
        showModal("Upload Error", "Please select an image to upload!");
        return;
      }
      formData.append("profileImage", fileInput);
      fetch("/upload-therapist-profile", {
        method: "POST",
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          let profileImageElement = document.getElementById("profileImage");
          profileImageElement.src = `${data.profileImage}?t=${new Date().getTime()}`;
          let homeProfileIcon = document.querySelector(".profile-icon");
          if (homeProfileIcon) {
            homeProfileIcon.src = `${data.profileImage}?t=${new Date().getTime()}`;
          }
          showModal("Success", "Profile image updated successfully!");
        } else {
          showModal("Error", "Error uploading image: " + (data.error || "Unknown error"));
        }
      })
      .catch(error => {
        console.error("Upload error:", error);
        showModal("Error", "An error occurred while uploading.");
      });
    }

    document.addEventListener("DOMContentLoaded", function () {
      function updateFileName() {
        let fileInput = document.getElementById("profileImageInput");
        let fileNameDisplay = document.getElementById("file-name");
        if (fileInput && fileNameDisplay) {
          if (fileInput.files.length > 0) {
            fileNameDisplay.textContent = fileInput.files[0].name;
          } else {
            fileNameDisplay.textContent = "No file chosen";
          }
        }
      }
      document.body.addEventListener("change", function (event) {
        if (event.target && event.target.id === "profileImageInput") {
          updateFileName();
        }
      });
    });

    function togglePassword() {
      var passwordField = document.getElementById("passwordField");
      var toggleButton = document.getElementById("togglePassword");
      if (passwordField.type === "*******") {
        passwordField.type = "text";
        toggleButton.innerText = "🙈";
      } else {
        passwordField.type = "*******";
        toggleButton.innerText = "👁";
      }
    }

    document.addEventListener("click", function(event) {
      var dropdown = document.getElementById("dropdownMenu");
      var profileContainer = document.querySelector(".profile-container");
      if (!profileContainer.contains(event.target)) {
        dropdown.classList.remove("active");
      }
    });

    document.addEventListener("DOMContentLoaded", function () {
      fetch("/get-therapist-appointments")
      .then(response => response.json())
      .then(data => {
        let tableBody = document.getElementById("appointmentsTable");
        tableBody.innerHTML = "";
        if (data.length === 0) {
          tableBody.innerHTML = "<tr><td colspan='4'>No pending appointments</td></tr>";
          return;
        }
        data.forEach(appointment => {
          let row = `
            <tr>
              <td>${appointment.patientEmail}</td>
              <td>${appointment.date}</td>
              <td>${appointment.time}</td>
              <td>
                <button onclick="approveAppointment('${appointment._id}')">Approve</button>
                <button onclick="rejectAppointment('${appointment._id}')">Reject</button>
              </td>
            </tr>
          `;
          tableBody.innerHTML += row;
        });
      })
      .catch(error => console.error("Error fetching appointments:", error));
    });

    function approveAppointment(appointmentId) {
      fetch("/approve-appointment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ appointmentId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showModal("Success", "Appointment approved!", () => {
            location.reload();
          });
        } else {
          showModal("Error", "Error approving appointment: " + data.error);
        }
      });
    }

    function rejectAppointment(appointmentId) {
      fetch("/reject-appointment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ appointmentId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showModal("Success", "Appointment rejected.", () => {
            location.reload();
          });
        } else {
          showModal("Error", "Error rejecting appointment.");
        }
      });
    }

    // NEW function to load the therapist's approved appointments
    function loadTherapistApprovedAppointments() {
      fetch("/get-therapist-approved-appointments")
      .then(response => response.json())
      .then(data => {
        const tableBody = document.querySelector("#therapistApprovedAppointmentsTable tbody");
        tableBody.innerHTML = "";
        if (data.length === 0) {
          tableBody.innerHTML = "<tr><td colspan='3'>No approved appointments</td></tr>";
          return;
        }
        data.forEach(appointment => {
          const row = `
            <tr>
              <td>${appointment.patientEmail}</td>
              <td>${appointment.date}</td>
              <td>${appointment.time}</td>
            </tr>
          `;
          tableBody.innerHTML += row;
        });
      })
      .catch(error => {
        console.error("Error fetching approved therapist appointments:", error);
      });
    }

    // Toggle visibility of the grade form for a specific patient
    function toggleGradeForm(email) {
      const form = document.getElementById(`gradeForm-${email}`);
      if (form) {
        form.style.display = (form.style.display === 'none' ? 'block' : 'none');
      }
    }

    // Save Grades without redirecting to the homepage
    async function saveGrades(email) {
      const games = ['animalSounds', 'bookReading', 'wordSearch', 'wordFlipbook', 'matchingGames', 'tongueTwisters'];
      let grades = {};
      for (let game of games) {
        const input = document.getElementById(`grade-${game}-${email}`);
        if (input) {
          const value = input.value.trim();
          grades[game] = value === "" ? null : Number(value);
        }
      }
      try {
        const response = await fetch("/add-grades", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, grades })
        });
        const data = await response.json();
        if (data.success) {
          showModal("Success", "Grades saved successfully!",() => {
                loadPage('patients');
              });
          // Remain on the patients page (no reload)
        } else {
          showModal("Error", "Error saving grades: " + (data.message || ""));
        }
      } catch (err) {
        console.error("Error saving grades:", err);
        showModal("Error", "Server error saving grades.");
      }
    }

    function hideLoading() {
      document.getElementById("loading-overlay").style.display = "none";
    }
    window.addEventListener('load', () => { setTimeout(hideLoading, 500); });
  
    function startGameAnimalSounds(){

  console.log("animalsounds-script.js loaded!");

// Immediately attach event listeners
document.querySelectorAll(".play-sound").forEach((button) => {
  button.addEventListener("click", () => {
    const soundPath = button.dataset.sound;
    console.log(`Attempting to play: ${soundPath}`);
    const sound = new Audio(soundPath);
    sound
      .play()
      .then(() => {
        console.log(`Playing sound: ${soundPath}`);
      })
      .catch((error) => {
        console.error(`Error playing sound: ${soundPath}`, error);
      });
  });
});

const recordings = new Map();

document.querySelectorAll(".animal").forEach((animalDiv) => {
  const recordButton = animalDiv.querySelector(".record-sound");
  const playButton = animalDiv.querySelector(".play-recording");
  const animal = recordButton.dataset.animal;

  recordButton.addEventListener("click", async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert("Microphone access is not supported in your browser.");
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(chunks, { type: "audio/wav" });
        const audioUrl = URL.createObjectURL(audioBlob);
        recordings.set(animal, audioUrl);
        playButton.disabled = false;
        console.log(`Recording saved for ${animal}.`);
      };

      mediaRecorder.start();
      showModal(`Recording started for ${animal}.`, "You can now speak to record your voice!");

      setTimeout(() => {
        mediaRecorder.stop();
        stream.getTracks().forEach((track) => track.stop());
        console.log(`Recording stopped for ${animal}.`);
      }, 3000);
    } catch (error) {
      console.error(`Error recording for ${animal}:`, error);
      alert("Could not access your microphone. Please check permissions.");
    }
  });

  playButton.addEventListener("click", () => {
    if (recordings.has(animal)) {
      const audio = new Audio(recordings.get(animal));
      audio.play();
    } else {
      showModal(`No recording available for ${animal}.`, "Please record first!");
    }
  });
});


// Modal Functionality
// Ensure modal only opens when clicked
  const modal = document.getElementById("info-modal");
  const btn = document.getElementById("info-button");
  const close = document.querySelector(".modal .close");

  // Make sure modal is hidden initially
  modal.style.display = "none";

  btn.addEventListener("click", () => {
    modal.style.display = "block"; // Show modal when button is clicked
  });

  close.addEventListener("click", () => {
    modal.style.display = "none"; // Close modal when X is clicked
  });

  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      modal.style.display = "none"; // Close modal if user clicks outside of it
    }
  });
  
  }
  
  </script>

</body>
</html>