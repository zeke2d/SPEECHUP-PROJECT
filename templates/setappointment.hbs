<style>
   /* Set Appointment Form */
.content-area {
    max-width: 5000px;
    margin: 50px auto;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

/* Heading */
.content-area h2 {
    margin-bottom: 20px;
    font-size: 22px;
    color: #2d3e50;
}

.content-area h3 {
    margin-bottom: 20px;
    font-size: 15px;
    color: #2d3e50;
}


/* Appointment Form */
.appointment-form {
    margin-top: 20px;
    max-width: 500px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.appointment-form label {
    font-weight: bold;
    align-self: flex-start;
    margin-bottom: 5px;
}

.appointment-form input, 
.appointment-form select {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 5px;
    border: 2px solid #2c3e50;
}

/* Dropdown styling */
#therapistDropdown, 
#selectedTime {
    background-color: #ffffff;
    cursor: pointer;
    appearance: none; /* Removes default dropdown arrow in some browsers */
    background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
    background-repeat: no-repeat;
    background-position: right .7em top 50%;
    background-size: .65em auto;
    padding-right: 1.3em;
}

.btn-time {
    background-color: #ddd4d9;
    color: rgb(0, 0, 0);
    padding: 5px 10px;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    margin-bottom: 30px;
    border: 2px solid #2c3e50;
}

.btn-time:hover {
    background-color: #e9e3e4;
}

/* Button */
.btn {
    background-color: #df1645;
    color: white;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    margin-top: 15px;
}

.btn:hover {
    background-color: #ff003c;
}
 
</style>

<div class="content-area">
  <h2>Set an Appointment</h2>

  <div class="appointment-form">
    <!-- Hidden input for patient email -->
    <input type="hidden" id="patientEmail" value="{{patientEmail}}" >

    <label>Select Therapist:</label>
    <h3>*Kindly check the therapist's working hours before setting an appointment. </h3>
    <select id="therapistDropdown" required>
      <option value="">Select a therapist</option>
    </select>
    <div id="therapistWorkingHours"></div>

    <label>Select Date:</label>
    <input type="date" id="selectedDate" required >

    <!-- Time Dropdown: It will be dynamically populated -->
    <label>Select Time:</label>
    <select id="selectedTime" class="btn-time" required>
      <option value="">Select a time</option>
    </select>

    <button class="btn" onclick="requestAppointment()">Request Appointment</button>
  </div>

</div>

<script>
   document.addEventListener("DOMContentLoaded", function() {
    // Fetch all therapists when the page loads
    fetchTherapists();
    
    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('selectedDate').min = today;
    
    // Add event listener for therapist selection
    document.getElementById('therapistDropdown').addEventListener('change', function() {
      const selectedTherapistEmail = this.value;
      if (selectedTherapistEmail) {
        fetchTherapistWorkingHours(selectedTherapistEmail);
      } else {
        // Clear working hours display if no therapist selected
        document.getElementById('therapistWorkingHours').innerHTML = '';
        // Reset time dropdown
        document.getElementById('selectedTime').innerHTML = '<option value="">Select a time</option>';
      }
    });
  });
  
  // Fetch all therapists and populate the dropdown
  function fetchTherapists() {
    fetch("/get-therapists")
      .then(response => response.json())
      .then(therapists => {
        const dropdown = document.getElementById('therapistDropdown');
        
        // Clear any existing options (except the first one)
        while (dropdown.options.length > 1) {
          dropdown.remove(1);
        }
        
        // Add each therapist to the dropdown
        therapists.forEach(therapist => {
          const option = document.createElement('option');
          option.value = therapist.email;
          option.textContent = `${therapist.firstName} ${therapist.lastName} (${therapist.email}) - ${therapist.workingHours}`;
          dropdown.appendChild(option);
        });
      })
      .catch(error => {
        console.error("‚ùå Error fetching therapists:", error);
      });
  }
  
  // Fetch working hours for a specific therapist
  function fetchTherapistWorkingHours(therapistEmail) {
    fetch(`/get-therapist/${therapistEmail}`)
      .then(response => response.json())
      .then(therapist => {
        // Display working hours
        document.getElementById('therapistWorkingHours').innerHTML = 
          `<p>Working Hours: ${therapist.workingHours}</p>`;
        
        // Clear current time options
        const timeSelect = document.getElementById('selectedTime');
        timeSelect.innerHTML = '<option value="">Select a time</option>';
        
        // Generate time options based on therapist's working hours
        generateTimeOptionsForTherapist(therapist.workingHours);
      })
      .catch(error => {
        console.error("‚ùå Error fetching therapist details:", error);
      });
  }
  
// Function to generate time options dynamically in 15-minute intervals
    function generateTimeOptions(selectElementId, intervalMinutes) {
      const select = document.getElementById(selectElementId);
      // Start at midnight
      let current = new Date();
      current.setHours(0, 0, 0, 0);
      
      // End at 11:45 PM
      const end = new Date();
      end.setHours(23, 59, 59, 999);
    
      while (current <= end) {
        // Calculate hours and minutes
        let hours = current.getHours();
        let minutes = current.getMinutes();
        // Determine AM/PM and convert to 12-hour format
        const suffix = hours >= 12 ? 'PM' : 'AM';
        let displayHour = hours % 12;
        if (displayHour === 0) displayHour = 12;
        // Format minutes with leading zero if needed
        const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
        const timeString = `${displayHour}:${formattedMinutes} ${suffix}`;
    
        // Create and append an option
        const option = document.createElement('option');
        option.value = timeString;
        option.textContent = timeString;
        select.appendChild(option);
    
        // Increase current time by the interval
        current.setMinutes(current.getMinutes() + intervalMinutes);
      }
    }
    
    // Generate options on page load (using 15-minute intervals)
    document.addEventListener("DOMContentLoaded", function () {
      generateTimeOptions("selectedTime", 15);
    });
    
    function requestAppointment() {
      const therapistEmail = document.getElementById("therapistDropdown").value.trim();
      const selectedDate   = document.getElementById("selectedDate").value.trim();
      const selectedTime   = document.getElementById("selectedTime").value.trim();
      const patientEmail   = document.getElementById("patientEmail").value.trim();
    
      console.log("üì¢ Sending Appointment Request:", {
        therapistEmail,
        patientEmail,
        date: selectedDate,
        time: selectedTime
      });
    
      // Validate inputs
      if (!therapistEmail || !selectedDate || !selectedTime || !patientEmail) {
        alert("Please fill in all fields before requesting an appointment.");
        return;
      }
    
      fetch("/add-appointment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          therapistEmail,
          patientEmail,
          date: selectedDate,
          time: selectedTime, // now includes AM/PM, e.g. "3:15 PM"
          status: "Pending"
        })
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            alert("Appointment request sent! Waiting for therapist approval.");
            location.reload();
          } else {
            alert("Error submitting appointment: " + data.error);
          }
        })
        .catch(error => console.error("‚ùå Error:", error));
    }
</script>

