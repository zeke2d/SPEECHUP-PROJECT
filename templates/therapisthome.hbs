<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>SPEECH UP</title>
  <link rel="icon" href="tabpic.png" type="image/png">

  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <style>

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999; / Ensure it's on top */
        }
.loader {
            border: 16px solid #f3f3f3;
            border-top: 16px solid #db3f34; 
            border-radius: 50%;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite; / Spin the element */
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    body {
      display: flex;
      height: 100vh;
      background-color: #eef3fa;
    }

    /* Sidebar */
    .sidebar {
      width: 250px;
      background-color: #2c3e50;
      color: white;
      padding: 20px;
      display: flex;
      flex-direction: column;
      position: fixed;
      height: 100vh;
      left: 0;
      top: 0;
      transition: transform 0.3s ease-in-out;
    }

    .sidebar h3 {
      margin-bottom: 20px;
      text-align: center;
    }

    .sidebar a {
      text-decoration: none;
      color: white;
      padding: 10px;
      margin: 5px 0;
      display: block;
      border-radius: 5px;
      cursor: pointer;
    }

    .sidebar a:hover {
      background-color: #df1645;
    }

    /* Hidden Sidebar */
    .sidebar.hidden {
      transform: translateX(-100%);
    }

    /* Sidebar Toggle Button */
    .sidebar-toggle {
      position: fixed;
      top: 300px;
      left: 255px;
      background-color: #2c3e50;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 10px;
      padding: 5px;
      border-radius: 50%;
      transition: left 0.3s ease-in-out;
    }

    .sidebar.hidden + .sidebar-toggle {
      left: 10px;
    }

    .speechup-logo{
      border-radius: 5px;
    }

    /* Main Content */
    .main-content {
      flex: 1;
      padding: 20px;
      margin-left: 260px;
      transition: margin-left 0.3s ease-in-out;
      width: 100%;
    }

    .sidebar.hidden ~ .main-content {
      margin-left: 20px;
    }

    /* Top Bar */
    .top-bar {
      background-color: #fff;
      padding: 10px 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    /* Welcome Text */
    .welcome-section {
      margin-top: 20px;
    }

    h2 {
      color: #333;
    }

    /* Profile Section */
    .profile-container {
      display: flex;
      align-items: center;
      cursor: pointer;
      margin-left: auto; 
    }

    .profile-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #dcd7d9;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: bold;
      font-size: 18px;
      cursor: pointer;
    }

    .dropdown-menu {
      position: absolute;
      top: 70px;
      right: 0;
      background-color: #2c3e50;
      border: 1px solid #2c3e50;
      border-radius: 5px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      display: none;
      width: 150px;
    }

    .dropdown-menu a {
      display: block;
      padding: 10px;
      text-decoration: none;
      color: #ffffff;
      text-align: left;
    }

    .dropdown-menu a:hover {
      background-color: #df1645;
    }

    .dropdown-menu.active {
      display: block;
    }

    .logout-btn {
      display: block;
      padding: 10px;
      color: white;
      background-color: red;
      text-align: center;
      text-decoration: none;
      border-radius: 5px;
    }

    .logout-btn:hover {
      background-color: darkred;
    }

    /* Dynamic Content */
    .content-area {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-top: 20px;
    }

    /* Therapist Home - Pending Appointments */
    table {
      width: 100%;
      margin-top: 20px;
      border-radius: 5px;
      border: 4px solid #2c3e50;
    }

    th, td {
      padding: 10px;
      border: 1px solid #ddd;
      text-align: center;
      border-radius: 5px;
    }

    th {
      background-color: #df1645;
      color: white;
      border-radius: 5px;
    }

    /* Action Buttons */
    td button {
      padding: 5px 10px;
      border: none;
      cursor: pointer;
      font-size: 14px;
    }

    td button:first-child {
      background-color: #28a745;
      color: white;
      border-radius: 5px;
    }

    td button:first-child:hover {
      background-color: #00ff62;
      color: white;
    }

    td button:last-child {
      background-color: #dc3545;
      color: white;
      border-radius: 5px;
    }

    td button:last-child:hover {
      background-color: #ff0000;
      color: white;
    }

    /* Our custom .btn class (not Bootstrap) */
    .btn {
      display: inline-block;
      padding: 10px 10px;
      background-color: #df1645; 
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 15px;
      transition: background-color 0.3s ease;
    }

    .btn:hover {
      background-color: #ff003c;
    }

  </style>
</head>
<body>

 <div id="loading-overlay"> 
        <div class="loader"></div>
    </div>

  <!-- Sidebar -->
 <div class="sidebar" id="sidebar">
    <img src="speechuplogo.png" alt="SpeechUp Logo" class="speechup-logo">
    <br>
    <a href="/therapisthome" onclick="loadPage('home')">
      <i class="fas fa-home"></i> Home
    </a>
    <a href="#" onclick="loadPage('therapists')">
      <i class="fas fa-user"></i> Therapists
    </a>
    <a href="#" onclick="loadPage('patients')">
      <i class="fas fa-heart"></i> Patients
    </a>
    <a href="#" onclick="loadPage('courses')">
      <i class="fas fa-book"></i> Courses
    </a>
    <a href="#" onclick="loadPage('communityforum')">
      <i class="fas fa-comments"></i> Community Forum
    </a>
  </div>

  <!-- Sidebar Toggle Button -->
  <button class="sidebar-toggle" id="sidebarToggle" onclick="toggleSidebar()">&#9664;</button>

  <!-- Main Content -->
  <div class="main-content" id="mainContent">

    <!-- Top Bar with Search and Profile -->
    <div class="top-bar">
      <div class="profile-container" onclick="toggleDropdown()">
        <img class="profile-icon" src="{{profileImage}}" alt="Profile">
        <div class="dropdown-menu" id="dropdownMenu">
          <a href="#" onclick="loadPage('therapistprofile'); return false;">View Profile</a>
          <a href="/logout" class="logout-btn">Log Out</a>
        </div>
      </div>
    </div>

    <!-- Dynamic Content Area -->
    <div class="content-area" id="contentArea">
      <h2>Welcome back {{firstName}}!</h2>
      <br><br>
      <h3>Here are your Appointment Requests</h3>
      <table border="1">
        <thead>
          <tr>
            <th>Patient Email</th>
            <th>Date</th>
            <th>Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="appointmentsTable">
          <tr><td colspan="4">Loading appointments...</td></tr>
        </tbody>
      </table>
      <br><br>

      <!-- New "View Approved Appointments" section -->
      <button class="btn" onclick="loadTherapistApprovedAppointments()">View Approved Appointments</button>

      <table border="1" id="therapistApprovedAppointmentsTable">
        <thead>
          <tr>
            <th>Patient Email</th>
            <th>Date</th>
            <th>Time</th>
          </tr>
        </thead>
        <tbody>
          <tr><td colspan="3">Approved Appointments</td></tr>
        </tbody>
      </table>
    </div>

  </div>

  <script>
    function toggleSidebar() {
      document.getElementById("sidebar").classList.toggle("hidden");
      document.getElementById("sidebarToggle").innerHTML = 
        document.getElementById("sidebar").classList.contains("hidden") ? "&#9654;" : "&#9664;";
    }

    function loadPage(page) {

       document.getElementById("loading-overlay").style.display = "flex";

      if (page === 'communityforum') {
        fetch('/communityforum')
          .then(response => response.text())
          .then(html => {
            document.getElementById("contentArea").innerHTML = html;
            addForumEventListeners();
            document.getElementById("loading-overlay").style.display = "none";
          })
          .catch(error => {
            console.error("Error loading page:", error);
            document.getElementById("contentArea").innerHTML = "<h2>Error loading content</h2>";
            document.getElementById("loading-overlay").style.display = "none";
          });
      } else {
        fetch(`/content/${page}`)
          .then(response => {
            if (!response.ok) {
              throw new Error("Page not found");
            }
            return response.text();
          })
          .then(html => {
            document.getElementById("contentArea").innerHTML = html;

            // Add event listeners AFTER the content is loaded
            if (page === 'courses') {
              addCoursesEventListeners();
            }
            if (page === 'apraxiagameselection') {
              addApraxiaEventListeners();
            }
            if (page === 'dysarthriagameselection') {
              addDysarthriaEventListeners();
            }
            if (page === 'aphasiagameselection') {
              addAphasiaEventListeners();
            }
            if (page === 'animalsounds') {
              startGameAnimalSounds();
            }
                 // Execute inline scripts manually
          const scripts = contentArea.querySelectorAll("script");
          scripts.forEach(script => {
            try {
              eval(script.innerText);
            } catch (e) {
              console.error("Error executing script:", e);
            }
          });
          
            document.getElementById("loading-overlay").style.display = "none";
          })
          .catch(error => {
            console.error("Error loading page:", error);
            document.getElementById("contentArea").innerHTML = "<h2>Error loading content</h2>";
            document.getElementById("loading-overlay").style.display = "none";
          });
      }
    }

    function addForumEventListeners() {
      const postForm = document.querySelector('.forum-container form[action="/communityforum/post"]');
      if (postForm) {
        postForm.addEventListener('submit', async (e) => {
          e.preventDefault();

          const formData = new FormData(postForm);
          const data = Object.fromEntries(formData.entries());
          console.log("Form Data:", data);

          try {
            const response = await fetch('/communityforum/post', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data),
            });

            if (response.ok) {
              console.log("Post submitted successfully!");
              loadPage('communityforum');
            } else {
              console.error("Failed to submit post:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting post:", error);
          }
        });
      }

      const replyForms = document.querySelectorAll('.forum-container form[action^="/communityforum/reply/"]');
      replyForms.forEach(form => {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();

          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());
          console.log("Reply Form Data:", data);

          try {
            const response = await fetch(form.action, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data),
            });

            if (response.ok) {
              console.log("Reply submitted successfully!");
              loadPage('communityforum');
            } else {
              console.error("Failed to submit reply:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting reply:", error);
          }
        });
      });
    }

    function toggleDropdown() {
      document.getElementById("dropdownMenu").classList.toggle("active");
    }

    function searchFunction() {
      alert("Searching: " + document.getElementById("searchInput").value);
    }

    function addCoursesEventListeners() {
      const apraxiaButton = document.querySelector('.button-group button:nth-child(1)');
      if (apraxiaButton) {
        apraxiaButton.addEventListener('click', () => {
          loadPage('apraxiagameselection');
        });
      }

      const dysarthriaButton = document.querySelector('.button-group button:nth-child(2)');
      if (dysarthriaButton) {
        dysarthriaButton.addEventListener('click', () => {
          loadPage('dysarthriagameselection');
        });
      }

      const aphasiaButton = document.querySelector('.button-group button:nth-child(3)');
      if (aphasiaButton) {
        aphasiaButton.addEventListener('click', () => {
          loadPage('aphasiagameselection');
        });
      }
    }

    function addApraxiaEventListeners() {
      const animalSoundsButton = document.querySelector('.button-group button:nth-child(1)');
      if (animalSoundsButton) {
        animalSoundsButton.addEventListener('click', () => {
          loadPage('animalsounds');
        });
      }

      const bookReadingButton = document.querySelector('.button-group button:nth-child(2)');
      if (bookReadingButton) {
        bookReadingButton.addEventListener('click', () => {
          loadPage('bookreading');
        });
      }
    }

    function addDysarthriaEventListeners() {
      const wordSearchButton = document.querySelector('.button-group button:nth-child(1)');
      if (wordSearchButton) {
        wordSearchButton.addEventListener('click', () => {
          loadPage('wordsearch');
        });
      }

      const wordFlipbookButton = document.querySelector('.button-group button:nth-child(2)');
      if (wordFlipbookButton) {
        wordFlipbookButton.addEventListener('click', () => {
          loadPage('wordflipbook');
        });
      }
    }

    function addAphasiaEventListeners() {
      const matchingGamesButton = document.querySelector('.button-group button:nth-child(1)');
      if (matchingGamesButton) {
        matchingGamesButton.addEventListener('click', () => {
          loadPage('matchinggames');
        });
      }

      const tongueTwistersButton = document.querySelector('.button-group button:nth-child(2)');
      if (tongueTwistersButton) {
        tongueTwistersButton.addEventListener('click', () => {
          loadPage('tonguetwisters');
        });
      }
    }

    function enableEditing() {
      document.getElementById("firstName").disabled = false;
      document.getElementById("lastName").disabled = false;
      document.getElementById("password").disabled = false;
      document.getElementById("bio").disabled = false;
      document.getElementById("workingHours").disabled = false;

      document.getElementById("editProfile").style.display = "none";
      document.getElementById("updateProfile").style.display = "inline-block";
    }

    async function updateProfile() {
      const firstName = document.getElementById("firstName").value;
      const lastName = document.getElementById("lastName").value;
      const password = document.getElementById("password").value;
      const bio = document.getElementById("bio").value;
      const workingHours= document.getElementById("workingHours").value;

      const response = await fetch("/update-profile-therapist", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ firstName, lastName, password, bio, workingHours })
      });

      const result = await response.json();

      if (result.success) {
        alert("Profile updated successfully!");
        window.location.reload();
      } else {
        alert("Error updating profile.");
      }
    }

    async function deleteAccount() {
      if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
        const response = await fetch("/delete-account-therapist", { method: "POST" });
        const result = await response.json();

        if (result.success) {
          alert("Account deleted successfully!");
          window.location.href = "/";
        } else {
          alert("Error deleting account.");
        }
      }
    }

    async function verifyTherapistPassword() {
      const enteredPassword = document.getElementById("verifyPassword").value;
      
      const response = await fetch("/verify-password-therapist", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ password: enteredPassword })
      });

      const result = await response.json();

      if (result.success) {
        document.getElementById("passwordField").value = enteredPassword;
        document.getElementById("togglePassword").disabled = false;
        alert("Password verified successfully!");
      } else {
        alert("Incorrect password!");
      }
    }

    function uploadTherapistProfileImage(event) {
      event.preventDefault();

      let formData = new FormData();
      let fileInput = document.getElementById("profileImageInput").files[0];

      if (!fileInput) {
        alert("Please select an image to upload.");
        return;
      }

      formData.append("profileImage", fileInput);

      fetch("/upload-therapist-profile", {
        method: "POST",
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          let profileImageElement = document.getElementById("profileImage");
          profileImageElement.src = `${data.profileImage}?t=${new Date().getTime()}`;
          
          let homeProfileIcon = document.querySelector(".profile-icon");
          if (homeProfileIcon) {
            homeProfileIcon.src = `${data.profileImage}?t=${new Date().getTime()}`;
          }
          alert("Profile image updated successfully!");
        } else {
          alert("Error uploading image: " + (data.error || "Unknown error"));
        }
      })
      .catch(error => {
        console.error("Upload error:", error);
        alert("An error occurred while uploading.");
      });
    }

    document.addEventListener("DOMContentLoaded", function () {
      function updateFileName() {
        let fileInput = document.getElementById("profileImageInput");
        let fileNameDisplay = document.getElementById("file-name");

        if (fileInput && fileNameDisplay) {
          if (fileInput.files.length > 0) {
            fileNameDisplay.textContent = fileInput.files[0].name;
          } else {
            fileNameDisplay.textContent = "No file chosen";
          }
        }
      }

      document.body.addEventListener("change", function (event) {
        if (event.target && event.target.id === "profileImageInput") {
          updateFileName();
        }
      });
    });

    function togglePassword() {
      var passwordField = document.getElementById("passwordField");
      var toggleButton = document.getElementById("togglePassword");

      if (passwordField.type === "*******") {
        passwordField.type = "text";
        toggleButton.innerText = "🙈";
      } else {
        passwordField.type = "*******";
        toggleButton.innerText = "👁";
      }
    }

    document.addEventListener("click", function(event) {
      var dropdown = document.getElementById("dropdownMenu");
      var profileContainer = document.querySelector(".profile-container");

      if (!profileContainer.contains(event.target)) {
        dropdown.classList.remove("active");
      }
    });

    document.addEventListener("DOMContentLoaded", function () {
      fetch("/get-therapist-appointments")
      .then(response => response.json())
      .then(data => {
        let tableBody = document.getElementById("appointmentsTable");
        tableBody.innerHTML = ""; // Clear previous content

        if (data.length === 0) {
          tableBody.innerHTML = "<tr><td colspan='4'>No pending appointments</td></tr>";
          return;
        }

        data.forEach(appointment => {
          let row = `
            <tr>
              <td>${appointment.patientEmail}</td>
              <td>${appointment.date}</td>
              <td>${appointment.time}</td>
              <td>
                <button onclick="approveAppointment('${appointment._id}')">Approve</button>
                <button onclick="rejectAppointment('${appointment._id}')">Reject</button>
              </td>
            </tr>
          `;
          tableBody.innerHTML += row;
        });
      })
      .catch(error => console.error("Error fetching appointments:", error));
    });

    function approveAppointment(appointmentId) {
      fetch("/approve-appointment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ appointmentId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert("Appointment approved!");
          location.reload();
        } else {
          alert("Error approving appointment." + data.error);
        }
      });
    }

    function rejectAppointment(appointmentId) {
      fetch("/reject-appointment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ appointmentId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert("Appointment rejected.");
          location.reload();
        } else {
          alert("Error rejecting appointment.");
        }
      });
    }

    // NEW function to load the therapist's approved appointments
    function loadTherapistApprovedAppointments() {
      fetch("/get-therapist-approved-appointments")
      .then(response => response.json())
      .then(data => {
        const tableBody = document.querySelector("#therapistApprovedAppointmentsTable tbody");
        tableBody.innerHTML = ""; // Clear existing rows

        if (data.length === 0) {
          tableBody.innerHTML = "<tr><td colspan='3'>No approved appointments</td></tr>";
          return;
        }

        data.forEach(appointment => {
          const row = `
            <tr>
              <td>${appointment.patientEmail}</td>
              <td>${appointment.date}</td>
              <td>${appointment.time}</td>
            </tr>
          `;
          tableBody.innerHTML += row;
        });
      })
      .catch(error => {
        console.error("Error fetching approved therapist appointments:", error);
      });
    }

    // Toggle visibility of the grade form for a specific patient
  function toggleGradeForm(email) {
    const form = document.getElementById(`gradeForm-${email}`);
    if (form) {
      form.style.display = (form.style.display === 'none' ? 'block' : 'none');
    }
  }

  // Collect the grades and send them to the server
  async function saveGrades(email) {
    const games = ['animalSounds', 'bookReading', 'wordSearch', 'wordFlipbook', 'matchingGames', 'tongueTwisters'];
    let grades = {};

    for (let game of games) {
      const input = document.getElementById(`grade-${game}-${email}`);
      if (input) {
        // Convert the grade to a number (or leave as string if preferred)
        const value = input.value.trim();
        grades[game] = value === "" ? null : Number(value);
      }
    }

    try {
      const response = await fetch("/add-grades", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, grades })
      });
      const data = await response.json();
      if (data.success) {
        alert("Grades saved successfully!");
        // Optionally, reload the page to update the display
        window.location.reload();
      } else {
        alert("Error saving grades: " + (data.message || ""));
      }
    } catch (err) {
      console.error("Error saving grades:", err);
      alert("Server error saving grades.");
    }
  }

  function hideLoading() {
            document.getElementById("loading-overlay").style.display = "none";
        }

        // Hide the loading overlay after a 2-second delay
        window.addEventListener('load', (event) => {
            setTimeout(hideLoading, 500); 
        });

        
        function startGameAnimalSounds(){

  console.log("animalsounds-script.js loaded!");

// Immediately attach event listeners
document.querySelectorAll(".play-sound").forEach((button) => {
  button.addEventListener("click", () => {
    const soundPath = button.dataset.sound;
    console.log(`Attempting to play: ${soundPath}`);
    const sound = new Audio(soundPath);
    sound
      .play()
      .then(() => {
        console.log(`Playing sound: ${soundPath}`);
      })
      .catch((error) => {
        console.error(`Error playing sound: ${soundPath}`, error);
      });
  });
});

const recordings = new Map();

document.querySelectorAll(".animal").forEach((animalDiv) => {
  const recordButton = animalDiv.querySelector(".record-sound");
  const playButton = animalDiv.querySelector(".play-recording");
  const animal = recordButton.dataset.animal;

  recordButton.addEventListener("click", async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert("Microphone access is not supported in your browser.");
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(chunks, { type: "audio/wav" });
        const audioUrl = URL.createObjectURL(audioBlob);
        recordings.set(animal, audioUrl);
        playButton.disabled = false;
        console.log(`Recording saved for ${animal}.`);
      };

      mediaRecorder.start();
      alert(`Recording started for ${animal}. Click OK to stop.`);

      setTimeout(() => {
        mediaRecorder.stop();
        stream.getTracks().forEach((track) => track.stop());
        console.log(`Recording stopped for ${animal}.`);
      }, 3000);
    } catch (error) {
      console.error(`Error recording for ${animal}:`, error);
      alert("Could not access your microphone. Please check permissions.");
    }
  });

  playButton.addEventListener("click", () => {
    if (recordings.has(animal)) {
      const audio = new Audio(recordings.get(animal));
      audio.play();
      console.log(`Playing recording for ${animal}.`);
    } else {
      alert(`No recording available for ${animal}.`);
    }
  });
});
  
}

let currentRecipientEmail = '';

  function openEmailModal(recipientEmail) {

    currentRecipientEmail = recipientEmail;

    document.getElementById('recipientEmailInput').value = recipientEmail;
    document.getElementById('emailSubject').value = '';
    document.getElementById('emailMessage').value = '';
    document.getElementById('emailModal').style.display = 'flex';
  }

  function closeEmailModal() {
    document.getElementById('emailModal').style.display = 'none';
  }

  function sendEmail() {
    const senderEmail = document.getElementById('senderEmailInput').value;
    const senderPassword = document.getElementById('senderPasswordInput').value;
    const recipientEmail = document.getElementById('recipientEmailInput').value;
    const subject = document.getElementById('emailSubject').value;
    const message = document.getElementById('emailMessage').value;

    // Validate inputs
    if (!senderEmail || !senderPassword || !recipientEmail || !subject || !message) {
        alert('Please fill in all fields.');
        return;
    }

    console.log('Sending email from:', senderEmail); // Debug log
    console.log('Sending email to:', recipientEmail); // Debug log
    console.log('Subject:', subject); // Debug log
    console.log('Message:', message); // Debug log

    fetch('/send-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            from: senderEmail, // Sender's Gmail address
            to: recipientEmail, // Recipient's email address
            subject: subject,
            text: message,
            password: senderPassword, // Sender's Gmail app password
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.message) {
        alert(data.message);
      } else {
        alert(data.error || 'Error sending email');
      }
      closeEmailModal();
    })
    .catch(err => {
      console.error('Error:', err);
      alert('Error sending email');
      closeEmailModal();
    });
  }
  
  </script>

</body>
</html>
