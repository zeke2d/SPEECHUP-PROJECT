<style>
  
  .back-btn {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    color: #333;
    border: none;
    padding: 8px 8px;
    font-size: 16px;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    font-weight: bold;
    margin-bottom: 20px;
  }
  .back-btn:hover {
    background-color: #e0e0e0;
    transform: translateX(-3px);
  }
  .back-btn::before {
    content: "‚Æê";
    margin-right: 8px;
    font-size: 18px;
  }

  .page-header {
      background-color: #FF7878;
      color: white;
      text-align: center;
      padding: 20px;
      border-radius: 25px;
      width: fit-content;
      margin: 0 auto;
    }

    .page-header h1 {
      margin: 0;
      font-weight: bold;
    }

    .page-header p {
      margin: 5px 0 0;
      font-style: italic;
      opacity: 0.75;
    }
  /****************************************
   * GAME CONTAINER (similar to animalsounds.hbs)
   ****************************************/
  .game-container {
    position: relative; /* So the modal can be absolutely placed within */
    max-width: 600px;
    width: 100%;
    padding: 20px;
    margin: 0 auto;
    background: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    border-radius: 8px;
  }

  /****************************************
   * BOARD & CARD STYLES
   ****************************************/
  .board {
    display: grid;
    grid-template-columns: repeat(4, 100px);
    grid-template-rows: repeat(4, 100px);
    gap: 10px;
    margin-top: 20px;
    margin-bottom: 20px;
  }
  .card {
    width: 100px;
    height: 100px;
    background-color: #D9D9D9;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    position: relative;
    border-radius: 10px;
    /* Removed margin-left: 500px! */
  }
  .card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 10px;
  }
  .card .hidden {
    display: none;
  }
  /* Hide the question mark when the fruit is visible */
  .card:not(.matched):has(img.visible)::after {
      content: ""; /* Remove the '?' when the image is shown */
  }
  .card:not(.matched)::after {
    content: "?";
    font-size: 32px;
    font-weight: bold;
    color: #FF7878;
    position: absolute;
  }
  .card.matched::after {
    content: ""; /* Remove '?' when matched */
  }
  .card.matched {
    border: 2px solid #FF7878;
    box-shadow: 0 0 10px rgba(255, 120, 120, 0.5);
    transition: border 0.3s ease, box-shadow 0.3s ease;
  }

  /****************************************
   * MODAL (confined to .game-container)
   ****************************************/
  .modal {
    position: absolute; /* absolute to the .game-container */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* You can use a semi-transparent overlay if you like: */
    background: rgba(255, 120, 120, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
  }
  .modal-content {
    background: white;
    padding: 20px;
    text-align: center;
    border-radius: 10px;
    /* If you want a smaller modal, set a max-width, etc. */
  }

  /****************************************
   * BUTTON STYLES
   ****************************************/
  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #df1645;
    border: none;
    color: white;
    border-radius: 5px;
    cursor: pointer;
  }
  button:hover {
    background: #ff003c;
  }

   /* ------------------ Custom Modal for Alerts ------------------ */
    .custom-modal-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6);
    }
    .custom-modal {
      background-color: #fff;
      width: 300px;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    .custom-modal h2 {
      margin-top: 0;
      color: #2c3e50;
    }
    .custom-modal p {
      color: #333;
      margin-bottom: 20px;
    }
    .close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
    }
    .modal-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .modal-ok-button:hover {
      background-color: #ff003c;
    }

    /* ------------------ Custom Confirm Modal ------------------ */
    .custom-confirm-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6);
    }
    .custom-confirm {
      background-color: #fff;
      width: 300px;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    .custom-confirm h2 {
      margin-top: 0;
      color: #2c3e50;
    }
    .custom-confirm p {
      color: #333;
      margin-bottom: 20px;
    }
    .confirm-close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
    }
    .confirm-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .confirm-ok-button:hover {
      background-color: #ff003c;
    }
    .confirm-cancel-button {
      background-color: #888;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 10px;
      transition: background-color 0.3s ease;
    }
    .confirm-cancel-button:hover {
      background-color: #666;
    }

</style>

<!-- Back Button -->
<button onclick="loadPage('aphasiagameselection')" class="back-btn">
  Back to Aphasia Unit
</button>

<!-- Header Section -->
<div class="page-header">
  <h1>Aphasia Unit - Matching Games</h1>
  <p>Boost Memory, Boost Speech. Let's Match!</p>
</div>

<!-- Main Container for the Game -->
<div class="game-container">
  <!-- Modal (confined to .game-container) -->
  <div id="modal" class="modal">
    <div class="modal-content">
      <h2>Memorize the fruits!</h2>
      <button id="startGame">Start Game</button>
    </div>
  </div>

  <!-- Game Board -->
  <div id="gameBoard" class="board"></div>
  <audio id="correctSound" src="sfx-correctAnswer.mp3"></audio>
    <audio id="incorrectSound" src="sfx-incorrectAnswer.mp3"></audio>

</div>

<!-- Custom Alert Modal -->
  <div id="customModalOverlay" class="custom-modal-overlay">
    <div class="custom-modal">
      <button class="close-button" onclick="closeModal()">&times;</button>
      <h2 id="modalTitle">Alert</h2>
      <br>
      <p id="modalMessage">Modal message goes here.</p>
      <button class="modal-ok-button" onclick="closeModal()">OK</button>
    </div>
  </div>

  <!-- Custom Confirm Modal -->
  <div id="customConfirmOverlay" class="custom-confirm-overlay">
    <div class="custom-confirm">
      <button class="confirm-close-button" onclick="closeConfirmModal()">&times;</button>
      <h2 id="confirmModalTitle">Confirm</h2>
      <p id="confirmModalMessage">Are you sure?</p>
      <div style="margin-top:20px;">
        <button id="modalOkButton" class="confirm-ok-button">OK</button>
        <button id="modalCancelButton" class="confirm-cancel-button">Cancel</button>
      </div>
    </div>
  </div>

<script>

  /******** Custom Modal Functions with Callback ********/
    function showModal(title, message, callback) {
      document.getElementById("modalTitle").innerText = title;
      document.getElementById("modalMessage").innerText = message;
      const overlay = document.getElementById("customModalOverlay");
      overlay.style.display = "block";
      const okButton = overlay.querySelector(".modal-ok-button");
      okButton.onclick = function() {
        closeModal();
        if (callback) callback();
      };
    }
    function closeModal() {
      document.getElementById("customModalOverlay").style.display = "none";
    }

    /******** Custom Confirm Modal Functions ********/
    function confirmModal(title, message) {
      return new Promise((resolve) => {
        document.getElementById("confirmModalTitle").innerText = title;
        document.getElementById("confirmModalMessage").innerText = message;
        const overlay = document.getElementById("customConfirmOverlay");
        overlay.style.display = "block";
        const okButton = document.getElementById("modalOkButton");
        const cancelButton = document.getElementById("modalCancelButton");
        okButton.onclick = function() {
          closeConfirmModal();
          resolve(true);
        };
        cancelButton.onclick = function() {
          closeConfirmModal();
          resolve(false);
        };
      });
    }
    function closeConfirmModal() {
      document.getElementById("customConfirmOverlay").style.display = "none";
    }

  const images = [
    "apple.jpg", "kiwi.jpg", "orange.jpg", "watermelon.jpg",
    "blueberry.jpg", "grape.jpg", "dragonfruit.jpg", "peach.jpg"
  ];

  // Get the audio elements
const correctSound = document.getElementById("correctSound");
const incorrectSound = document.getElementById("incorrectSound");

  let cards = [...images, ...images]; // Duplicate to make pairs
  let flippedCards = [];
  let matchedPairs = 0;
  let canFlip = false; // Prevent flipping during memorization

  function shuffle(array) {
    return array.sort(() => Math.random() - 0.5);
  }

  function createBoard() {
    const board = document.getElementById("gameBoard");
    board.innerHTML = "";
    const shuffledCards = shuffle(cards);
    shuffledCards.forEach((image) => {
      const card = document.createElement("div");
      card.classList.add("card");

      const img = document.createElement("img");
      img.src = image;
      img.classList.add("visible"); // Start visible for 5 seconds

      card.appendChild(img);
      board.appendChild(card);
      card.addEventListener("click", flipCard);
    });

    // Show images for 5 seconds, then hide them
    setTimeout(() => {
      document.querySelectorAll(".card img").forEach(img => {
        img.classList.remove("visible");
        img.classList.add("hidden"); // Hide all images after 5 sec
      });
      canFlip = true; // Allow flipping after memorization
    }, 5000);
  }

  function flipCard() {
    if (!canFlip || flippedCards.length === 2) return;
    let img = this.querySelector("img");
    if (!img.classList.contains("hidden")) return;

    // Show this card
    img.classList.remove("hidden");
    img.classList.add("visible");
    flippedCards.push(this);

    // If two cards are flipped, check match
    if (flippedCards.length === 2) {
      canFlip = false;
      setTimeout(checkMatch, 800);
    }
  }

  //debugging, locating audio elements
function playSound(sound, callback) {
    if (!sound) {
        console.error("Audio element not found! Check if the script runs after the HTML loads.");
        return;
    }

    if (!sound.src) {
        console.error("Audio source is missing! Check the file path.");
        return;
    }

    canFlip = false; // Prevent further clicks while sound is playing

    sound.play().then(() => {
        sound.onended = () => {
            canFlip = true; // Re-enable clicking after sound ends
            if (callback) callback(); // Execute any follow-up logic
        };
    }).catch(error => {
        console.error("Error playing audio:", error);
        canFlip = true; // Ensure game is not stuck if sound fails
    });
}

  // Check if two flipped cards match
function checkMatch() {
    if (flippedCards.length < 2) {
        console.error("checkMatch called with less than 2 cards!", flippedCards);
        return;
    }

    const [card1, card2] = flippedCards;

    if (!card1 || !card2) {
        console.error("Undefined card detected!", card1, card2);
        flippedCards = [];
        canFlip = true;
        return;
    }

    const img1 = card1.querySelector("img");
    const img2 = card2.querySelector("img");

    if (!img1 || !img2) {
        console.error("Image element not found!", img1, img2);
        flippedCards = [];
        canFlip = true;
        return;
    }

    if (img1.src === img2.src) {
        // ‚úÖ Highlight matched cards immediately
        card1.classList.add("matched");
        card2.classList.add("matched");

        // ‚úÖ Play sound in parallel with highlighting
        playSound(correctSound, () => {
            matchedPairs++;

            if (matchedPairs === images.length) {
                setTimeout(() => showModal("üéâ Congratulations!", " You matched all pairs!"), 300);
            }

            flippedCards = [];
            canFlip = true;
        });

    } else {
        playSound(incorrectSound, () => {
            img1.classList.remove("visible");
            img1.classList.add("hidden");

            img2.classList.remove("visible");
            img2.classList.add("hidden");

            flippedCards = [];
            canFlip = true;
        });
    }
}

  // Start Game button inside the modal
  document.getElementById("startGame").addEventListener("click", () => {
    document.getElementById("modal").style.display = "none";
    canFlip = false; // Prevent clicking during the 5-sec reveal
    createBoard();
  });

  // Show modal initially
  document.getElementById("modal").style.display = "flex";
</script>
