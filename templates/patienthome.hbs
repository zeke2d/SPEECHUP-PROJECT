<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SPEECH UP</title>
    <link rel="icon" href="tabpic.png" type="image/png">

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

    <style>

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); 
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999; / Ensure it's on top */
        }
.loader {
            border: 16px solid #f3f3f3; 
            border-top: 16px solid #db3f34; 
            border-radius: 50%;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite; / Spin the element */
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        

        body {
            display: flex;
            height: 100vh;
            background-color: #eef3fa;
        }

        /* Sidebar */
        .sidebar {
            width: 250px;
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100vh;
            left: 0;
            top: 0;
            transition: transform 0.3s ease-in-out;
        }

        .sidebar h3 {
            margin-bottom: 20px;
            text-align: center;
        }

        .sidebar a {
            text-decoration: none;
            color: white;
            padding: 10px;
            margin: 5px 0;
            display: block;
            border-radius: 5px;
            cursor: pointer;
        }

        .sidebar a:hover {
            background-color: #df1645;
        }

        /* Hidden Sidebar */
        .sidebar.hidden {
            transform: translateX(-100%);
        }

        /* Sidebar Toggle Button */
        .sidebar-toggle {
            position: fixed;
            top: 300px;
            left: 255px;
            background-color: #2c3e50;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 10px;
            padding: 5px;
            border-radius: 50%;
            transition: left 0.3s ease-in-out;
        }

        .sidebar.hidden + .sidebar-toggle {
            left: 10px;
        }

        .speechup-logo {
            border-radius: 5px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 20px;
            margin-left: 260px;
            transition: margin-left 0.3s ease-in-out;
            width: 100%;
        }

        .sidebar.hidden ~ .main-content {
            margin-left: 20px;
        }

        /* Top Bar */
        .top-bar {
            background-color: #fff;
            padding: 10px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        /* Welcome Text */
        .welcome-section {
            margin-top: 20px;
        }

        h2 {
            color: #333;
        }

        /* Profile Section */
        .profile-container {
            display: flex;
            align-items: center;
            cursor: pointer;
            margin-left: auto; 
        }

        .profile-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #dcd7d9;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
            cursor: pointer;
        }

        .dropdown-menu {
            position: absolute;
            top: 70px;
            right: 0;
            background-color: #2c3e50;
            border: 1px solid #2c3e50;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: none;
            width: 150px;
        }

        .dropdown-menu a {
            display: block;
            padding: 10px;
            text-decoration: none;
            color: #ffffff;
            text-align: left;
        }

        .dropdown-menu a:hover {
            background-color: #df1645;
        }

        .dropdown-menu.active {
            display: block;
        }

        .logout-btn {
            display: block;
            padding: 10px;
            color: white;
            background-color: red;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
        }

        .logout-btn:hover {
            background-color: darkred;
        }

        /* Dynamic Content */
        .content-area {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }

        .btn {
            display: inline-block;
            padding: 10px 10px;
            background-color: #df1645; /* Match Upload button */
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 15px;
            transition: background-color 0.3s ease;
        }         

        .btn:hover {
        background-color: #ff003c; /* Darker shade on hover */
        }
        
        /* Appointment Request Form */
        .appointment-form {
            max-width: 400px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }
        
        .appointment-form label {
            font-weight: bold;
            display: block;
            margin-top: 10px;
        }

        table {
            width: 100%;
            margin-top: 20px;
            border-radius: 5px;
            border: 4px solid #2c3e50;
        }
        
        th, td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
            border-radius: 5px;
        }
        
        th {
            background-color: #df1645;
            color: white;
            border-radius: 5px;
        }

        /* ------------------ Custom Modal for Alerts ------------------ */
    .custom-modal-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6);
    }
    .custom-modal {
      background-color: #fff;
      width: 300px;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    .custom-modal h2 {
      margin-top: 0;
      color: #2c3e50;
    }
    .custom-modal p {
      color: #333;
      margin-bottom: 20px;
    }
    .close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
    }
    .modal-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .modal-ok-button:hover {
      background-color: #ff003c;
    }

    /* ------------------ Custom Confirm Modal ------------------ */
    .custom-confirm-overlay {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.6);
    }
    .custom-confirm {
      background-color: #fff;
      width: 300px;
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      position: relative;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }
    .custom-confirm h2 {
      margin-top: 0;
      color: #2c3e50;
    }
    .custom-confirm p {
      color: #333;
      margin-bottom: 20px;
    }
    .confirm-close-button {
      background: none;
      border: none;
      color: #333;
      font-size: 24px;
      position: absolute;
      right: 15px;
      top: 15px;
      cursor: pointer;
    }
    .confirm-ok-button {
      background-color: #df1645;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .confirm-ok-button:hover {
      background-color: #ff003c;
    }
    .confirm-cancel-button {
      background-color: #888;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 10px;
      transition: background-color 0.3s ease;
    }
    .confirm-cancel-button:hover {
      background-color: #666;
    }

    .badge-circle {
      width: 100px; 
      height: 100px; 
      border-radius: 50%; 
      border: 5px solid #df1645; 
      object-fit: cover;
    }

   @media (max-width: 768px) {
  /* Sidebar: Hidden by default via .hidden class */
  .sidebar {
    width: 200px;
    position: fixed;
    left: 0;
    top: 0;
    height: 100vh;
    transition: transform 0.3s ease-in-out;
    z-index: 1000;
  }
  /* Slide sidebar off-canvas when hidden */
  .sidebar.hidden {
    transform: translateX(-100%);
  }
  /* Ensure visible sidebar stays in place */
  .sidebar:not(.hidden) {
    transform: translateX(0);
  }

  /* Sidebar Toggle Button */
  .sidebar-toggle {
    position: fixed;
    top: 10px;
    left: 10px;
    background-color: #2c3e50;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
    padding: 8px;
    border-radius: 50%;
    z-index: 1100;
  }

  /* Main Content: Full width when sidebar is hidden */
  .main-content {
    margin-left: 0;
    padding: 10px;
    transition: margin-left 0.3s ease-in-out;
  }
  /* When sidebar is visible, push main content over */
  .sidebar:not(.hidden) ~ .main-content {
    margin-left: 200px;
  }

  /* Top Bar adjustments for mobile */
  .top-bar {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px;
  }

  /* Responsive table adjustments */
  table {
    display: block;
    width: 100%;
    overflow-x: auto;
  }

  /* Ensure the content area is relatively positioned for badge placement */
  .content-area,
  .appointment-form {
    padding: 15px;
    margin-top: 15px;
  }

  /* Position the badge inside the content area */
  .badge-circle {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
  }

  /* Optionally, adjust buttons and fonts */
  .btn {
    padding: 8px 12px;
    font-size: 14px;
  }

  /* Adjust header container to align items */
.header-container {
  background-color: #FF7878;
  padding: 20px;
  border-radius: 20px;
  width: fit-content;
  text-align: center;
  margin-top: 10px;
  margin-bottom: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Wrap h6 and button together */
.header-text {
  display: flex;
  align-items: center;
  gap: 2px; /* Space between h6 and button */
}

/* Ensure the button is aligned properly */
#info-button {
  background: none;
  border: none;
  width: 20px;  /* Adjust size */
  height: 20px;
  padding: 0;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Resize the button image */
#info-button img {
  width: 100%;
  height: 100%;
}

/* Modal Styling */
/* Ensure modal is hidden by default */
.modal {
  display: none; /* Hide modal initially */
  position: fixed; /* Stay in place */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: #FF7878; /* Set modal background color */
  color: white; /* White text */
  padding: 20px;
  border-radius: 10px;
  width: 350px; /* Set modal width */
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3); /* Optional shadow */
  z-index: 1000; /* Ensure it's above other content */
}

/* Close button styling */
.modal .close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 20px;
  cursor: pointer;
}

.modal-content {
  background-color: #FF7878;
  color: white;
  padding: 20px;
  border-radius: 10px;
  width: 100%; /* Ensure it takes full width inside modal */
  max-width: 400px; /* Limit max width */
  text-align: center;
  position: relative;
  box-sizing: border-box; /* Prevents padding from affecting width */
}

/* Close button */
.modal-content .close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 24px;
  cursor: pointer;
  color: white;
}

.modal-content .close:hover {
  color: #fff2f2;
}

h1 {
  color: white;
  margin: 0;
}

h6 {
  color: white;
  font-style: italic;
  opacity: 0.75;
  margin: 5px 0 0;
}
}


    </style>

</head>

<body>
<div id="loading-overlay"> 
        <div class="loader"></div>
    </div>

    <!-- Sidebar -->
 <div class="sidebar" id="sidebar">
    <img src="speechuplogo.png" alt="SpeechUp Logo" class="speechup-logo">
    <br>
    <a href="/patienthome" onclick="loadPage('home')">
      <i class="fas fa-home"></i> Home
    </a>
    <a href="#" onclick="loadPage('therapists')">
      <i class="fas fa-user"></i> Therapists
    </a>
    <a href="#" onclick="loadPage('courses')">
      <i class="fas fa-book"></i> Courses
    </a>
    <a href="#" onclick="loadPage('communityforum')">
      <i class="fas fa-comments"></i> Community Forum
    </a>
 </div>

    <!-- Sidebar Toggle Button -->
    <button class="sidebar-toggle" id="sidebarToggle" onclick="toggleSidebar()">&#9664;</button>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        
        <!-- Top Bar with Search and Profile -->
        <div class="top-bar">
            <div class="profile-container" onclick="toggleDropdown()">
                <img class="profile-icon" src="{{profileImage}}" alt="Profile">
                <div class="dropdown-menu" id="dropdownMenu">
                    <a href="#" onclick="loadPage('patientprofile'); return false;">View Profile</a>
                    <a href="/logout" class="logout-btn">Log Out</a>
                </div>
            </div>
        </div>

        <!-- Dynamic Content Area -->
        <div class="content-area" id="contentArea">
            <h2>Welcome back {{firstName}}!</h2>
            <!-- Badge container to the right of the welcome text -->
            <div id="badgeContainer"></div>
            <br>
            <br>
            <h3>Are you ready to start a therapy session with your therapist?</h3>
            <br>
            <h3>Click on the button below to set your appointment.</h3>
            <br>
            <button class="btn" onclick="loadPage('setappointment')">Set Appointment</button>

            <!-- Hidden input to store patient email -->
        <input type="hidden" id="patientEmail" value="{{email}}">

        <br>
        <br>
        <br>
        <br>
               <!-- New "View Approved Appointments" section -->
  <button class="btn" onclick="loadApprovedAppointments()">View Approved Appointments</button>
  
  <!-- Table to display approved appointments -->
  <table border="1" id="patientApprovedAppointmentsTable">
    <thead>
      <tr>
        <th>Therapist Email</th>
        <th>Date</th>
        <th>Time</th>
      </tr>
    </thead>
    <tbody>
      <tr><td colspan="3">Approved Appointments</td></tr>
    </tbody>
  </table>

   <br>
      <h3>My Grades</h3>
      <table border="1" id="patientGradesTable">
        <thead>
          <tr>
            <th>Animal Sounds</th>
            <th>Book Reading</th>
            <th>Word Search</th>
            <th>Word Flipbook</th>
            <th>Matching Games</th>
            <th>Tongue Twisters</th>
          </tr>
        </thead>
        <tbody>
          <tr><td colspan="6">Loading Grades.....</td></tr>
        </tbody>
      </table>
</div>

        </div>

        <!-- Custom Alert Modal -->
  <div id="customModalOverlay" class="custom-modal-overlay">
    <div class="custom-modal">
      <button class="close-button" onclick="closeModal()">&times;</button>
      <h2 id="modalTitle">Alert</h2>
      <br>
      <p id="modalMessage">Modal message goes here.</p>
      <button class="modal-ok-button" onclick="closeModal()">OK</button>
    </div>
  </div>

  <!-- Custom Confirm Modal -->
  <div id="customConfirmOverlay" class="custom-confirm-overlay">
    <div class="custom-confirm">
      <button class="confirm-close-button" onclick="closeConfirmModal()">&times;</button>
      <h2 id="confirmModalTitle">Confirm</h2>
      <p id="confirmModalMessage">Are you sure?</p>
      <div style="margin-top:20px;">
        <button id="modalOkButton" class="confirm-ok-button">OK</button>
        <button id="modalCancelButton" class="confirm-cancel-button">Cancel</button>
      </div>
    </div>
  </div>

    <script>

        /******** Custom Modal Functions with Callback ********/
    function showModal(title, message, callback) {
      document.getElementById("modalTitle").innerText = title;
      document.getElementById("modalMessage").innerText = message;
      const overlay = document.getElementById("customModalOverlay");
      overlay.style.display = "block";
      const okButton = overlay.querySelector(".modal-ok-button");
      okButton.onclick = function() {
        closeModal();
        if (callback) callback();
      };
    }
    function closeModal() {
      document.getElementById("customModalOverlay").style.display = "none";
    }

    /******** Custom Confirm Modal Functions ********/
    function confirmModal(title, message) {
      return new Promise((resolve) => {
        document.getElementById("confirmModalTitle").innerText = title;
        document.getElementById("confirmModalMessage").innerText = message;
        const overlay = document.getElementById("customConfirmOverlay");
        overlay.style.display = "block";
        const okButton = document.getElementById("modalOkButton");
        const cancelButton = document.getElementById("modalCancelButton");
        okButton.onclick = function() {
          closeConfirmModal();
          resolve(true);
        };
        cancelButton.onclick = function() {
          closeConfirmModal();
          resolve(false);
        };
      });
    }
    function closeConfirmModal() {
      document.getElementById("customConfirmOverlay").style.display = "none";
    }
        
        function toggleSidebar() {
            document.getElementById("sidebar").classList.toggle("hidden");
            document.getElementById("sidebarToggle").innerHTML = 
                document.getElementById("sidebar").classList.contains("hidden") ? "&#9654;" : "&#9664;";
        }

        function loadPage(page) {

            document.getElementById("loading-overlay").style.display = "flex";

    if (page === 'communityforum') {
        fetch('/communityforum')
            .then(response => response.text())
            .then(html => {
                document.getElementById("contentArea").innerHTML = html;
                addForumEventListeners(); // Add event listeners for the forum
                document.getElementById("loading-overlay").style.display = "none";
            })
            .catch(error => {
                console.error("Error loading page:", error);
                document.getElementById("contentArea").innerHTML = "<h2>Error loading content</h2>";
                document.getElementById("loading-overlay").style.display = "none";
            });
    } else {
        fetch(`/content/${page}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Page not found");
                }
                return response.text();
            })
            .then(html => {
                document.getElementById("contentArea").innerHTML = html;

                // Add event listeners AFTER the content is loaded
                if (page === 'courses') {
                    addCoursesEventListeners();
                }
                if (page === 'apraxiagameselection') {
                    addApraxiaEventListeners();
                }
                if (page === 'dysarthriagameselection') {
                    addDysarthriaEventListeners();
                }
                if (page === 'aphasiagameselection') {
                    addAphasiaEventListeners();
                }
                if (page === 'animalsounds') {
                    startGameAnimalSounds();
                }
                if (page === 'setappointment') {
                generateTimeOptions("selectedTime", 15);
                fetchTherapists();
            }
             // Execute inline scripts manually
          const scripts = contentArea.querySelectorAll("script");
          scripts.forEach(script => {
            try {
              eval(script.innerText);
            } catch (e) {
              console.error("Error executing script:", e);
            }
          });

            document.getElementById("loading-overlay").style.display = "none";
            })

            .catch(error => {
                console.error("Error loading page:", error);
                document.getElementById("contentArea").innerHTML = "<h2>Error loading content</h2>";
                document.getElementById("loading-overlay").style.display = "none";
            });
    }
}

function addForumEventListeners() {
      const postForm = document.querySelector('.forum-container form[action="/communityforum/post"]');
      if (postForm) {
        postForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(postForm);
          const data = Object.fromEntries(formData.entries());
          try {
            const response = await fetch('/communityforum/post', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data),
            });
            if (response.ok) {
              showModal("Success", "Post submitted successfully!", () => {
                loadPage('communityforum');
              });
            } else {
              console.error("Failed to submit post:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting post:", error);
          }
        });
      }

    const replyForms = document.querySelectorAll('.forum-container form[action^="/communityforum/reply/"]');
      replyForms.forEach(form => {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());
          try {
            const response = await fetch(form.action, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data),
            });
            if (response.ok) {
              showModal("Success", "Reply submitted successfully!", () => {
                loadPage('communityforum');
              });
            } else {
              console.error("Failed to submit reply:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting reply:", error);
          }
        });
      });
    }


        function toggleDropdown() {
            document.getElementById("dropdownMenu").classList.toggle("active");
        }

        function searchFunction() {
            alert("Searching: " + document.getElementById("searchInput").value);
        }

        function addCoursesEventListeners() {
        const apraxiaButton = document.querySelector('.button-group button:nth-child(1)'); // Select Apraxia button
    if (apraxiaButton) {
        apraxiaButton.addEventListener('click', () => {
            loadPage('apraxiagameselection');
        });
    }

        const dysarthriaButton = document.querySelector('.button-group button:nth-child(2)'); // Select Dysarthria button
    if (dysarthriaButton) {
        dysarthriaButton.addEventListener('click', () => {
            loadPage('dysarthriagameselection');
        });
    }

        const aphasiaButton = document.querySelector('.button-group button:nth-child(3)'); // Select Aphasia button
    if (aphasiaButton) {
        aphasiaButton.addEventListener('click', () => {
            loadPage('aphasiagameselection');
        });
    }

}

        function addApraxiaEventListeners(){
        const animalSoundsButton = document.querySelector('.button-group button:nth-child(1)');
    if(animalSoundsButton){
        animalSoundsButton.addEventListener('click', () => {
            loadPage('animalsounds'); // Load the animal sounds page
        });
    }

        const bookReadingButton = document.querySelector('.button-group button:nth-child(2)');
    if(bookReadingButton){
        bookReadingButton.addEventListener('click', () => {
            loadPage('bookreading'); // Load the book reading page
        });
    }
}

        function addDysarthriaEventListeners(){
        const wordSearchButton = document.querySelector('.button-group button:nth-child(1)');
    if(wordSearchButton){
        wordSearchButton.addEventListener('click', () => {
            loadPage('wordsearch'); 
        });
    }

        const wordFlipbookButton = document.querySelector('.button-group button:nth-child(2)');
    if(wordFlipbookButton){
        wordFlipbookButton.addEventListener('click', () => {
            loadPage('wordflipbook');
        });
    }
}

        function addAphasiaEventListeners(){
        const matchingGamesButton = document.querySelector('.button-group button:nth-child(1)');
    if(matchingGamesButton){
        matchingGamesButton.addEventListener('click', () => {
            loadPage('matchinggames');
        });
    }

        const tongueTwistersButton = document.querySelector('.button-group button:nth-child(2)');
    if(tongueTwistersButton){
        tongueTwistersButton.addEventListener('click', () => {
            loadPage('tonguetwisters');
        });
    }
}

        function enableEditing() {
        document.getElementById("firstName").disabled = false;
        document.getElementById("lastName").disabled = false;
        document.getElementById("password").disabled = false;
        document.getElementById("bio").disabled = false;

        document.getElementById("editProfile").style.display = "none";
        document.getElementById("updateProfile").style.display = "inline-block";
    }

        async function updateProfile() {
        const firstName = document.getElementById("firstName").value;
        const lastName = document.getElementById("lastName").value;
        const password = document.getElementById("password").value;
        const bio = document.getElementById("bio").value;

        const response = await fetch("/update-profile-patient", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ firstName, lastName, password, bio })
        });

        const result = await response.json();

        if (result.success) {
        showModal("Success", "Profile updated successfully!", () => {
                loadPage('patientprofile');
              });
      } else {
        showModal("Error", "Error updating profile.");
      }
    }

        async function deleteAccount() {
      const confirmed = await confirmModal(
        "Delete Account",
        "Are you sure you want to delete your account? This action cannot be undone."
      );
      if (confirmed) {
        const response = await fetch("/delete-account-therapist", { method: "POST" });
        const result = await response.json();
        if (result.success) {
          showModal("Success", "Account deleted successfully!", () => {
            window.location.href = "/";
          });
        } else {
          showModal("Error", "Error deleting account.");
        }
      }
    }

        async function verifyPatientPassword() {
        const enteredPassword = document.getElementById("verifyPassword").value;
        
        // Send password for verification
        const response = await fetch("/verify-password-patient", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ password: enteredPassword })
        });

        const result = await response.json();

        if (result.success) {
            document.getElementById("passwordField").value = enteredPassword;
            document.getElementById("togglePassword").disabled = false;

        showModal("Success", "Password verified successfully!");
      } else {
        showModal("Error", "Incorrect password!");
      }
    }


        function uploadPatientProfileImage(event) {
        event.preventDefault(); // Prevent form from reloading the page
    
        let formData = new FormData();
        let fileInput = document.getElementById("profileImageInput").files[0];
    
        if (!fileInput) {
            showModal("Upload Error", "Please select an image to upload!");
            return;
        }
    
        formData.append("profileImage", fileInput);
    
        fetch("/upload-patient-profile", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
    
                let profileImageElement = document.getElementById("profileImage");
                if (profileImageElement) {
                    profileImageElement.src = `${data.profileImage}?t=${new Date().getTime()}`;
                }
    
                let homeProfileIcon = document.querySelector(".profile-icon");
                if (homeProfileIcon) {
                    homeProfileIcon.src = `${data.profileImage}?t=${new Date().getTime()}`;
                }
    
                showModal("Success", "Profile image updated successfully!");
            } else {
                showModal("Error", "Error uploading image: " + (data.error || "Unknown error"));
            }
        })
        .catch(error => {
            console.error("Upload error:", error);
            showModal("Error", "An error occurred while uploading.");
        });
    }
    
        document.addEventListener("DOMContentLoaded", function () {
            function updateFileName() {
                let fileInput = document.getElementById("profileImageInput");
                let fileNameDisplay = document.getElementById("file-name");
    
            if (fileInput && fileNameDisplay) {
                if (fileInput.files.length > 0) {
                    fileNameDisplay.textContent = fileInput.files[0].name; // ✅ Update filename
                } else {
                    fileNameDisplay.textContent = "No file chosen"; // ✅ Reset text
                }
            }
        }
    
        document.body.addEventListener("change", function (event) {
            if (event.target && event.target.id === "profileImageInput") {
                updateFileName();
            }
        });
    });

        function togglePassword() {
        var passwordField = document.getElementById("passwordField");
        var toggleButton = document.getElementById("togglePassword");

        if (passwordField.type === "*******") {
            passwordField.type = "text";
            toggleButton.innerText = "🙈"; // Hide icon
        } else {
            passwordField.type = "*******";
            toggleButton.innerText = "👁"; // Show icon
        }
    }

    document.addEventListener("DOMContentLoaded", function() {
    // Fetch all therapists when the page loads
    fetchTherapists();
    
    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('selectedDate').min = today;
    
    // Add event listener for therapist selection
    document.getElementById('therapistDropdown').addEventListener('change', function() {
      const selectedTherapistEmail = this.value;
      if (selectedTherapistEmail) {
        fetchTherapistWorkingHours(selectedTherapistEmail);
      } else {
        // Clear working hours display if no therapist selected
        document.getElementById('therapistWorkingHours').innerHTML = '';
        // Reset time dropdown
        document.getElementById('selectedTime').innerHTML = '<option value="">Select a time</option>';
      }
    });
  });
  
  // Fetch all therapists and populate the dropdown
  function fetchTherapists() {
    fetch("/get-therapists")
      .then(response => response.json())
      .then(therapists => {
        const dropdown = document.getElementById('therapistDropdown');
        
        // Clear any existing options (except the first one)
        while (dropdown.options.length > 1) {
          dropdown.remove(1);
        }
        
        // Add each therapist to the dropdown
        therapists.forEach(therapist => {
          const option = document.createElement('option');
          option.value = therapist.email;
          option.textContent = `${therapist.firstName} ${therapist.lastName} (${therapist.email}) - ${therapist.workingHours}`;
          dropdown.appendChild(option);
        });
      })
      .catch(error => {
        console.error("❌ Error fetching therapists:", error);
      });
  }
  
  // Fetch working hours for a specific therapist
  function fetchTherapistWorkingHours(therapistEmail) {
    fetch(`/get-therapist/${therapistEmail}`)
      .then(response => response.json())
      .then(therapist => {
        // Display working hours
        document.getElementById('therapistWorkingHours').innerHTML = 
          `<p>Working Hours: ${therapist.workingHours}</p>`;
        
        // Clear current time options
        const timeSelect = document.getElementById('selectedTime');
        timeSelect.innerHTML = '<option value="">Select a time</option>';
        
        // Generate time options based on therapist's working hours
        generateTimeOptionsForTherapist(therapist.workingHours);
      })
      .catch(error => {
        console.error("❌ Error fetching therapist details:", error);
      });
  }
  
// Function to generate time options dynamically in 15-minute intervals
    function generateTimeOptions(selectElementId, intervalMinutes) {
      const select = document.getElementById(selectElementId);
      // Start at midnight
      let current = new Date();
      current.setHours(0, 0, 0, 0);
      
      // End at 11:45 PM
      const end = new Date();
      end.setHours(23, 59, 59, 999);
    
      while (current <= end) {
        // Calculate hours and minutes
        let hours = current.getHours();
        let minutes = current.getMinutes();
        // Determine AM/PM and convert to 12-hour format
        const suffix = hours >= 12 ? 'PM' : 'AM';
        let displayHour = hours % 12;
        if (displayHour === 0) displayHour = 12;
        // Format minutes with leading zero if needed
        const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
        const timeString = `${displayHour}:${formattedMinutes} ${suffix}`;
    
        // Create and append an option
        const option = document.createElement('option');
        option.value = timeString;
        option.textContent = timeString;
        select.appendChild(option);
    
        // Increase current time by the interval
        current.setMinutes(current.getMinutes() + intervalMinutes);
      }
    }
    
    // Generate options on page load (using 15-minute intervals)
    document.addEventListener("DOMContentLoaded", function () {
      generateTimeOptions("selectedTime", 15);
    });
    
    function requestAppointment() {
      const therapistEmail = document.getElementById("therapistDropdown").value.trim();
      const selectedDate   = document.getElementById("selectedDate").value.trim();
      const selectedTime   = document.getElementById("selectedTime").value.trim();
      const patientEmail   = document.getElementById("patientEmail").value.trim();
    
      console.log("📢 Sending Appointment Request:", {
        therapistEmail,
        patientEmail,
        date: selectedDate,
        time: selectedTime
      });
    
      // Validate inputs
      if (!therapistEmail || !selectedDate || !selectedTime || !patientEmail) {
        showModal("Try again", "Please fill in all fields before requesting an appointment!");
        return;
      }
    
      fetch("/add-appointment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          therapistEmail,
          patientEmail,
          date: selectedDate,
          time: selectedTime, // now includes AM/PM, e.g. "3:15 PM"
          status: "Pending"
        })
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            showModal("Appointment request sent!", "Waiting for therapist approval.");
            location.reload();
          } else {
            alert("Error submitting appointment: " + data.error);
          }
        })
        .catch(error => console.error("❌ Error:", error));
    }
        
        function loadApprovedAppointments() {
          fetch("/get-patient-approved-appointments")
            .then(response => response.json())
            .then(data => {
              const tableBody = document.querySelector("#patientApprovedAppointmentsTable tbody");
              tableBody.innerHTML = ""; // Clear existing rows
        
              if (data.length === 0) {
                tableBody.innerHTML = "<tr><td colspan='3'>No approved appointments</td></tr>";
                return;
              }
        
              data.forEach(appointment => {
                const row = `
                  <tr>
                    <td>${appointment.therapistEmail}</td>
                    <td>${appointment.date}</td>
                    <td>${appointment.time}</td>
                  </tr>
                `;
                tableBody.innerHTML += row;
              });
            })
            .catch(error => {
              console.error("Error fetching approved patient appointments:", error);
            });
        }

      function loadPatientGrades() {
      fetch("/get-patient-grades")
        .then((response) => response.json())
        .then((data) => {
          const gradesTableBody = document.querySelector("#patientGradesTable tbody");
          const badgeContainer = document.getElementById("badgeContainer");

          if (!data.success) {
            gradesTableBody.innerHTML = `<tr><td colspan='6'>Error loading grades</td></tr>`;
            badgeContainer.innerHTML = "";
            return;
          }

          const {
            animalSounds,
            bookReading,
            wordSearch,
            wordFlipbook,
            matchingGames,
            tongueTwisters
          } = data.grades || {};

          // If all are null, show "No grades found"
          const allNull =
            animalSounds == null &&
            bookReading == null &&
            wordSearch == null &&
            wordFlipbook == null &&
            matchingGames == null &&
            tongueTwisters == null;

          if (allNull) {
            gradesTableBody.innerHTML = `<tr><td colspan='6'>No grades found</td></tr>`;
            badgeContainer.innerHTML = "";
          } else {
            gradesTableBody.innerHTML = `
              <tr>
                <td>${animalSounds ?? ""}</td>
                <td>${bookReading ?? ""}</td>
                <td>${wordSearch ?? ""}</td>
                <td>${wordFlipbook ?? ""}</td>
                <td>${matchingGames ?? ""}</td>
                <td>${tongueTwisters ?? ""}</td>
              </tr>
            `;
             // --- NEW CODE: Compute the average ---
        // Convert each grade to a number if it's not null.
        // Filter out any null or undefined values.
        const numericGrades = [
          animalSounds,
          bookReading,
          wordSearch,
          wordFlipbook,
          matchingGames,
          tongueTwisters
        ]
          .filter((g) => g != null)     // remove null/undefined
          .map((g) => Number(g));       // convert to number

        if (numericGrades.length > 0) {
          const sum = numericGrades.reduce((acc, val) => acc + val, 0);
          const avg = sum / numericGrades.length;

          // Decide which badge to show based on the average
          if (avg >= 90) {
            badgeContainer.innerHTML = `
              <img 
                src="superherobadge90plus.png" 
                alt="Badge"
                class="badge-circle"
              >
            `;
          } else if (avg >= 80) {
            badgeContainer.innerHTML = `
              <img 
                src="superherobadge80plus.png" 
                alt="Badge"
                class="badge-circle"
              >
            `;
          } else {
            // If average is below 80, clear the badge or show nothing
            badgeContainer.innerHTML = "";
          }
        } else {
          // If for some reason we have 0 numeric grades
          badgeContainer.innerHTML = "";
        }
          }
        })
        .catch((error) => {
          console.error("Error fetching patient grades:", error);
          const gradesTableBody = document.querySelector("#patientGradesTable tbody");
          gradesTableBody.innerHTML = `<tr><td colspan='6'>Error loading grades</td></tr>`;
          // Clear badge on error
          const badgeContainer = document.getElementById("badgeContainer");
          if (badgeContainer) badgeContainer.innerHTML = "";
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
      // Automatically load the patient's grades
      loadPatientGrades();
    });

    function hideLoading() {
            document.getElementById("loading-overlay").style.display = "none";
        }

        // Hide the loading overlay after a 2-second delay
        window.addEventListener('load', (event) => {
            setTimeout(hideLoading, 500); 
        });

     function startGameAnimalSounds(){

  console.log("animalsounds-script.js loaded!");

// Immediately attach event listeners
document.querySelectorAll(".play-sound").forEach((button) => {
  button.addEventListener("click", () => {
    const soundPath = button.dataset.sound;
    console.log(`Attempting to play: ${soundPath}`);
    const sound = new Audio(soundPath);
    sound
      .play()
      .then(() => {
        console.log(`Playing sound: ${soundPath}`);
      })
      .catch((error) => {
        console.error(`Error playing sound: ${soundPath}`, error);
      });
  });
});

const recordings = new Map();

document.querySelectorAll(".animal").forEach((animalDiv) => {
  const recordButton = animalDiv.querySelector(".record-sound");
  const playButton = animalDiv.querySelector(".play-recording");
  const animal = recordButton.dataset.animal;

  recordButton.addEventListener("click", async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert("Microphone access is not supported in your browser.");
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(chunks, { type: "audio/wav" });
        const audioUrl = URL.createObjectURL(audioBlob);
        recordings.set(animal, audioUrl);
        playButton.disabled = false;
        console.log(`Recording saved for ${animal}.`);
      };

      mediaRecorder.start();
      showModal(`Recording started for ${animal}.`, "You can now speak to record your voice!");

      setTimeout(() => {
        mediaRecorder.stop();
        stream.getTracks().forEach((track) => track.stop());
        console.log(`Recording stopped for ${animal}.`);
      }, 3000);
    } catch (error) {
      console.error(`Error recording for ${animal}:`, error);
      alert("Could not access your microphone. Please check permissions.");
    }
  });

  playButton.addEventListener("click", () => {
    if (recordings.has(animal)) {
      const audio = new Audio(recordings.get(animal));
      audio.play();
      console.log(`Playing recording for ${animal}.`);
    } else {
      showModal(`No recording available for ${animal}.`, "Please record first!");
    }
  });
});


// Modal Functionality
// Ensure modal only opens when clicked
  const modal = document.getElementById("info-modal");
  const btn = document.getElementById("info-button");
  const close = document.querySelector(".modal .close");

  // Make sure modal is hidden initially
  modal.style.display = "none";

  btn.addEventListener("click", () => {
    modal.style.display = "block"; // Show modal when button is clicked
  });

  close.addEventListener("click", () => {
    modal.style.display = "none"; // Close modal when X is clicked
  });

  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      modal.style.display = "none"; // Close modal if user clicks outside of it
    }
  });

  }

  let currentRecipientEmail = '';

  function openEmailModal(recipientEmail) {

    currentRecipientEmail = recipientEmail;

    document.getElementById('recipientEmailInput').value = recipientEmail;
    document.getElementById('emailSubject').value = '';
    document.getElementById('emailMessage').value = '';
    document.getElementById('emailModal').style.display = 'flex';
  }

  function closeEmailModal() {
    document.getElementById('emailModal').style.display = 'none';
  }

 function sendEmail() {
    const subject = document.getElementById('emailSubject').value;
    const message = document.getElementById('emailMessage').value;

    // Validate inputs
    if (!subject || !message) {
        showModal('Try Again', 'Please fill in all fields!');
        return;
    }

    console.log('Sending email to:', currentRecipientEmail); // Debug log
    console.log('Subject:', subject); // Debug log
    console.log('Message:', message); // Debug log

    fetch('/send-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            to: currentRecipientEmail,
            subject: subject,
            text: message,
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            showModal('Success', 'Email has been sent!');
        } else {
            alert(data.error || 'Error sending email');
        }
        closeEmailModal();
    })
    .catch(err => {
        console.error('Error:', err);
        alert('Error sending email');
        closeEmailModal();
    });
}

//courses.hbs | modal for the 3 units ********************************************************************
function openModal(type, event) {
    event.stopPropagation(); // Prevents parent button click
    console.log("Opening modal for:", type); // Debugging log
    const modal = document.getElementById("modal");
    const modalContent = document.getElementById("modal-content");

    const messages = {
        "apraxia": `
            <h4>About Apraxia</h4>
            <p>Apraxia is a neurological disorder that affects your ability to perform purposeful movements,
             even though you have the muscle strength and understanding to do them. It's like your brain has trouble sending the right signals to your body.
            </p>
            <br>
            <h5>Signs & Symptoms:</h5>
            <ul>
                <em>
                <li>Difficulty with learned motor skills (e.g., brushing teeth, waving).</li>
                <li>Trouble sequencing movements.</li>
                <li>Speech apraxia affects speaking; difficulty forming words.</li>
                <li>Clumsiness or poor coordination.</li>
                <li>Inconsistent errors; sometimes you can do it, sometimes not.</li>
                </em>
            </ul>
            <br>
            <h5>Tips for You:</h5>
            <ul>
                <li>Break down tasks into smaller steps.</li>
                <li>Practice regularly, even small amounts.</li>
                <li>Use visual cues or demonstrations.</li>
                <li>Be patient with yourself; progress takes time.</li>
            </ul>
        `,
        "dysarthria": `
            <h4>About Dysarthria</h4>
            <p>Dysarthria is a motor speech disorder. It occurs when the muscles you use for speech are weakened or you have difficulty controlling them. 
            This can affect how clearly you speak.
            </p>
            <br>
            <h5>Signs & Symptoms:</h5>
            <ul>
                <em>
                <li>Slurred or mumbled speech.</li>
                <li>Slow rate of speech.</li>
                <li>Rapid rate of speech with a mumbled quality.</li>
                <li>Soft or quiet speech.</li>
                <li>Difficulty moving your tongue or facial muscles.</li>
                <li>Changes in voice quality (hoarse, breathy, nasal).</li>
                </em>
            </ul>
            <br>
            <h5>Tips for You:</h5>
            <ul>
                <li>Speak slowly and deliberately.</li>
                <li>Take deep breaths before speaking.</li>
                <li>Use shorter phrases.</li>
                <li>Focus on exaggerating your articulation.</li>
                <li>Work with a speech therapist.</li>
            </ul>
        `,
        "aphasia": `
            <h4>About Aphasia</h4>
            <p>Aphasia is a language disorder that affects your ability to communicate. It's caused by damage to the parts of the brain that control language.</p>
            <br>
            <h5>Signs & Symptoms:</h5>
            <ul>
                <em>
                <li>Difficulty speaking, finding words, or forming sentences.</li>
                <li>Trouble understanding spoken language.</li>
                <li>Problems with reading and writing.</li>
                <li>Using incorrect words or made-up words.</li>
                <li>Difficulty following conversations.</li>
                </em>
            </ul>
            <br>
            <h5>Tips for You:</h5>
            <ul>
                <li>Use visual aids like pictures or gestures.</li>
                <li>Speak slowly and clearly.</li>
                <li>Allow extra time for communication.</li>
                <li>Repeat or rephrase if needed.</li>
                <li>Work with a speech-language pathologist.</li>
            </ul>
        `
    };

    modalContent.innerHTML = messages[type];
    modal.style.display = "block";
}

// SpeechSynthesis API Integration
const synth = window.speechSynthesis;
let utterance;  // Stores the current speech
let isPaused = false;  // Tracks pause state
let isSpeaking = false; // Tracks if speech is actively playing

// Play/Pause/Resume Text-to-Speech
document.getElementById("play-text-sound").addEventListener("click", () => {
    const modalContent = document.querySelector(".modal-content").innerText.trim();

    if (!modalContent) {
        console.warn("Modal content is empty.");
        return;
    }

    // Always start fresh when the button is clicked
    startNewSpeech(modalContent);  // ✅ Ensures new speech starts
});

// Function to start speech from the top
function startNewSpeech(content) {
    console.log("Starting new speech...");  // ✅ Debug log for clarity
    if (synth.speaking || isPaused) {
        synth.cancel();  // ✅ Stop any active speech before starting fresh
    }

    utterance = new SpeechSynthesisUtterance(content);

    // Voice settings for clarity
    utterance.lang = 'en-US';
    utterance.rate = 0.9;
    utterance.pitch = 1.1;
    utterance.volume = 1.0;

    utterance.onstart = () => {
        console.log("Speech started...");
        isSpeaking = true;
        isPaused = false;
    };

    utterance.onend = () => {
        console.log("Speech finished.");
        isSpeaking = false;
        isPaused = false;
    };

    synth.speak(utterance);
}

// Stop Speech and Reset State when the Modal is Closed
function closeCoursesModal() {
    console.log("Closing modal...");

    if (synth.speaking || isPaused) {
        synth.cancel();  // ✅ Ensures speech is fully stopped
        console.log("Speech stopped.");
    }

    // Reset state and speech object to ensure fresh playback next time
    isSpeaking = false;
    isPaused = false;
    utterance = null;  // ✅ Fully reset utterance

    document.getElementById("modal").style.display = "none";
}
//END Courses Script********************************************************************************


//APRAXIA UNIT
//(ANIMAL SOUNDS script)********************************************************************************
 function showModal(title, message) {
    document.getElementById("modalTitle").innerText = title;
    document.getElementById("modalMessage").innerText = message;
    document.getElementById("customModalOverlay").style.display = "block";
  }

  function closeAnimalSoundsModal() {
    document.getElementById("customModalOverlay").style.display = "none";
  }
  
  function startGameAnimalSounds(){

  console.log("animalsounds-script.js loaded!");

// Immediately attach event listeners
document.querySelectorAll(".play-sound").forEach((button) => {
  button.addEventListener("click", () => {
    const soundPath = button.dataset.sound;
    console.log(`Attempting to play: ${soundPath}`);
    const sound = new Audio(soundPath);
    sound
      .play()
      .then(() => {
        console.log(`Playing sound: ${soundPath}`);
      })
      .catch((error) => {
        console.error(`Error playing sound: ${soundPath}`, error);
      });
  });
});

const recordings = new Map();

document.querySelectorAll(".animal").forEach((animalDiv) => {
  const recordButton = animalDiv.querySelector(".record-sound");
  const playButton = animalDiv.querySelector(".play-recording");
  const animal = recordButton.dataset.animal;

  recordButton.addEventListener("click", async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert("Microphone access is not supported in your browser.");
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(chunks, { type: "audio/wav" });
        const audioUrl = URL.createObjectURL(audioBlob);
        recordings.set(animal, audioUrl);
        playButton.disabled = false;
        console.log(`Recording saved for ${animal}.`);
      };

      mediaRecorder.start();
      showModal(`Recording started for ${animal}.`, "You can now speak to record your voice!");

      setTimeout(() => {
        mediaRecorder.stop();
        stream.getTracks().forEach((track) => track.stop());
        console.log(`Recording stopped for ${animal}.`);
      }, 3000);
    } catch (error) {
      console.error(`Error recording for ${animal}:`, error);
      alert("Could not access your microphone. Please check permissions.");
    }
  });

  playButton.addEventListener("click", () => {
    if (recordings.has(animal)) {
      const audio = new Audio(recordings.get(animal));
      audio.play();
    } else {
      showModal(`No recording available for ${animal}.`, "Please record first!");
    }
  });
});

// Modal Functionality
// Ensure modal only opens when clicked
  const modal = document.getElementById("info-modal");
  const btn = document.getElementById("info-button");
  const close = document.querySelector(".modal .close");

  // Make sure modal is hidden initially
  modal.style.display = "none";

  btn.addEventListener("click", () => {
    modal.style.display = "block"; // Show modal when button is clicked
  });

  close.addEventListener("click", () => {
      modal.style.display = "none"; // Close modal when X is clicked
      
      // Stop and reset audio
      if (synth.speaking || isPaused) {
          synth.cancel(); // Cancels and resets the speech synthesis
          isPaused = false; // Reset pause state
      }
  });

  window.addEventListener("click", (event) => {
      if (event.target === modal) {
          modal.style.display = "none"; // Close modal if user clicks outside of it
          
          // Stop and reset audio
          if (synth.speaking || isPaused) {
              synth.cancel();
              isPaused = false;
          }
      }
  });

// SpeechSynthesis API Integration with Pause/Resume Feature
const synth = window.speechSynthesis;
let utterance;   // Store current speech
let isPaused = false;  // Track pause state

document.getElementById("play-text-sound").addEventListener("click", () => {
    const modalContent = document.querySelector(".modal-content").innerText.trim();

    if (!modalContent) {
        console.warn("Modal content is empty.");
        return;
    }

    // Handle Pause/Resume
    if (synth.speaking) {
        if (isPaused) {
            synth.resume();
            isPaused = false;
            console.log("Speech resumed.");
        } else {
            synth.pause();
            isPaused = true;
            console.log("Speech paused.");
        }
        return;
    }

    // If no speech is active, start fresh
    utterance = new SpeechSynthesisUtterance(modalContent);

    // Optional: Voice settings for clarity
    utterance.lang = 'en-US'; // language setting 
    utterance.rate = 0.9;     // Speaking speed (1 is normal, lower is slower)
    utterance.pitch = 1.2;    // Slightly higher pitch for better clarity
    utterance.volume = 1.0;   // max volume

    utterance.onend = () => {
        console.log("Speech finished.");
        isPaused = false; // Reset pause state when finished
    };

    synth.speak(utterance);
});
  
} // ANIMAL SOUNDS end script********************************************************************************

//BOOK READING start********************************************************************************
let accuracyScores = {
    "Love You Forever": null,
    "Three Blind Mice": null
};
let bookReadingAverage = 0;  // Tracks the average score

// ====== Show & Hide Custom Modal ======
  function showModal(title, message) {
    document.getElementById("modalTitle").innerText = title;
    document.getElementById("modalMessage").innerText = message;
    document.getElementById("customModalOverlay").style.display = "block";
  }
  function closeBookReadingModal() {
    document.getElementById("customModalOverlay").style.display = "none";
  }
  
let bookSelector = document.getElementById("bookSelector");
let bookImage = document.getElementById("bookImage");
let bookText = document.getElementById("bookText");
let audioButtons = document.getElementById("audioButtons");
let recordButton = document.querySelector(".audio-buttons img[alt='Record Sound']");
let playButton = document.querySelector(".audio-buttons img[alt='Play Recording']");

let mediaRecorder;
let audioChunks = [];
let recordings = {}; // Store recordings per book
let isRecording = false;
let transcript = "";

// Ignore stop words
const stopWords = new Set(["the", "and", "is", "as", "a", "an", "for", "of", "to", "in", "on", "at", "with"]);

// Speech Recognition
let recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
recognition.continuous = false;
recognition.lang = "en-US";
recognition.interimResults = false;
recognition.maxAlternatives = 1;

// Request microphone access on page load
navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
    mediaRecorder = new MediaRecorder(stream);
    console.log("Microphone access granted.");
}).catch((error) => {
    console.error("Microphone access denied: ", error);
});

bookSelector.addEventListener("change", function() {
    if (bookSelector.value === "loveyouforever") {
        bookImage.src = "book-loveyouforever.png";
        bookText.innerText = `I'll love you forever, 
                              I'll like you for always, 
                              As long as I'm living 
                              my baby you'll be.`;
        audioButtons.style.display = "flex";
    } else if (bookSelector.value === "threeblindmice") {
        bookImage.src = "book-threeblindmice.png";
        bookText.innerText = `“ Three Blind Mice
                                Three Blind Mice
                                See how they run
                                See how they run
                                They all ran after the farmer’s wife
                                She cut off their tails with a carving knife
                                Did you ever see such a sight in your life
                                as THREE BLIND MICE. ”`;
        audioButtons.style.display = "flex";
    } else {
        audioButtons.style.display = "none";
    }
});

// Recording Audio & Speech Recognition Together
recordButton.addEventListener("click", () => {
    if (!mediaRecorder) {
        console.error("Microphone access not available.");
        return;
    }
    let bookName = bookSelector.options[bookSelector.selectedIndex].text;
    
    if (isRecording) {
        mediaRecorder.stop();
        recognition.stop();
        return;
    }
    
    console.log(`Recording started for: ${bookName}`);
    audioChunks = [];
    isRecording = true;
    transcript = "";

    // Create a promise that resolves when recording stops
    let recordingPromise = new Promise(resolve => {
        mediaRecorder.ondataavailable = (event) => {
            audioChunks.push(event.data);
        };
        mediaRecorder.onstop = () => {
            let audioBlob = new Blob(audioChunks, { type: "audio/webm" });
            let audioUrl = URL.createObjectURL(audioBlob);
            recordings[bookName] = audioUrl; // Store recording by book name
            isRecording = false;
            console.log(`Finished recording for: ${bookName}`);
            resolve();
        };
    });
    
    // Create a promise that resolves when recognition ends
    let recognitionPromise = new Promise(resolve => {
        recognition.onresult = (event) => {
            transcript = event.results[0][0].transcript.trim().toLowerCase();
        };
        recognition.onend = () => {
            resolve();
        };
    });

    mediaRecorder.start();
    recognition.start();

    // Stop both after 25 seconds if not already stopped
    setTimeout(() => {
        if (isRecording) {
            mediaRecorder.stop();
            recognition.stop();
        }
    }, 25000);

    // When both promises resolve, run the analysis
    Promise.all([recordingPromise, recognitionPromise]).then(() => {
        console.log(`User said: ${transcript}`);
        analyzeAccuracy(transcript, bookText.innerText, bookName);
    });
});

// Playing back the recorded audio
playButton.addEventListener("click", () => {
    let bookName = bookSelector.options[bookSelector.selectedIndex].text;
    if (isRecording) {
        mediaRecorder.stop();
        recognition.stop();
    }
    if (recordings[bookName]) {
        let recordedAudio = new Audio(recordings[bookName]);
        recordedAudio.play();
    } else {
        showModal("No recording available for this book. Please record first.");
    }
});

function levenshteinDistance(a, b) {
    let matrix = [];
    for (let i = 0; i <= b.length; i++) {
        matrix[i] = [i];
    }
    for (let j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
    }
    for (let i = 1; i <= b.length; i++) {
        for (let j = 1; j <= a.length; j++) {
            if (b.charAt(i - 1) === a.charAt(j - 1)) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1, // Substitution
                    matrix[i][j - 1] + 1,     // Insertion
                    matrix[i - 1][j] + 1      // Deletion
                );
            }
        }
    }
    return matrix[b.length][a.length];
}

// Analyzing speech accuracy
function analyzeAccuracy(userSpeech, referenceText, bookName) {
    if (!userSpeech) {
        console.log(`Analysis skipped: No speech detected for ${bookName}`);
        return;
    }

    let cleanText = (text) => text.toLowerCase().replace(/[^\w\s]/g, '');
    let userWords = cleanText(userSpeech).split(/\s+/).filter(word => word.length > 0 && !stopWords.has(word));
    let referenceWords = cleanText(referenceText.replace(/<br>/g, " ")).split(/\s+/).filter(word => word.length > 0 && !stopWords.has(word));

    let correctCount = 0;
    let totalWords = referenceWords.length;

    for (let i = 0; i < totalWords; i++) {
        if (i < userWords.length) {
            let distance = levenshteinDistance(userWords[i], referenceWords[i]);
            let maxLen = Math.max(userWords[i].length, referenceWords[i].length);
            let similarity = (maxLen - distance) / maxLen;

            if (similarity > 0.8) {
                correctCount++;
            } else if (similarity > 0.5) {
                correctCount += 0.5;
            }
        }
    }

    let accuracy = (correctCount / totalWords) * 100;

    // Store the score for the respective book
    if (bookName.includes("Love You Forever")) {
        accuracyScores["Love You Forever"] = accuracy;
    } else if (bookName.includes("Three Blind Mice")) {
        accuracyScores["Three Blind Mice"] = accuracy;
    }

    // Calculate the average score
    let scores = Object.values(accuracyScores).filter(score => score !== null);
    if (scores.length === 2) {
        bookReadingAverage = (scores.reduce((sum, score) => sum + score, 0)) / 2;
        console.log(`Updated Book Reading Average: ${bookReadingAverage.toFixed(2)}%`);
    }

    console.log(`Analysis complete: Accuracy score for ${bookName} is ${accuracy.toFixed(2)}%`);
    showModal(`Your accuracy for "${bookName}":`, `${accuracy.toFixed(2)}%`);
}

    const modal = document.getElementById("info-modal");
    const btn = document.getElementById("info-button");
    const close = document.querySelector(".modal .close");
  
    // Make sure modal is hidden initially
    modal.style.display = "none";
  
    btn.addEventListener("click", () => {
      modal.style.display = "block"; // Show modal when button is clicked
    });
  
    close.addEventListener("click", () => {
      modal.style.display = "none"; // Close modal when X is clicked
    });
  
    window.addEventListener("click", (event) => {
      if (event.target === modal) {
        modal.style.display = "none"; // Close modal if user clicks outside of it
      }
    });
  //END Book Reading********************************************************************************
    </script>

</body>
</html>